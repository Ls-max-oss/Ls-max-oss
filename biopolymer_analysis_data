{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "141NymPYJQeCwll4t0l1_l9c_O5niybvp",
      "authorship_tag": "ABX9TyN2EU84RNQEcybWAvj8rqVO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ls-max-oss/Ls-max-oss/blob/main/biopolymer_analysis_data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "id": "BNeQ1CTShff9"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n",
        "from scipy.optimize import minimize\n",
        "import io # For capturing df.info() output"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.ioff() # Desativa a exibição interativa de gráficos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qOZuDgCph4k1",
        "outputId": "8f06c82f-e049-40d2-ebcd-a1fb665aacb7"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<contextlib.ExitStack at 0x7c86ac66e2d0>"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set_style(\"whitegrid\")\n",
        "plt.rcParams[\"figure.figsize\"] = (10, 6)"
      ],
      "metadata": {
        "id": "RMsqVdiWh6DK"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def capture_df_info(df):\n",
        "    \"\"\"Captures df.info() output as a string.\"\"\"\n",
        "    buffer = io.StringIO()\n",
        "    df.info(buf=buffer)\n",
        "    return buffer.getvalue()\n",
        "\n",
        "def capture_df_describe(df):\n",
        "    \"\"\"Captures df.describe() output as a Markdown table string.\"\"\"\n",
        "    return df.describe().to_markdown(index=True, numalign=\"left\", stralign=\"left\")\n",
        "\n",
        "def load_and_inspect_data(file_path, file_type, encoding=\"utf-8\", delimiter=\",\"):\n",
        "  print(f\"\\n--- Carregando e Inspecionando {file_type}: {os.path.basename(file_path)} ---\")\n",
        "  df = pd.read_csv(file_path, delimiter=delimiter, decimal=\".\", encoding=encoding)\n",
        "  print(\"Primeiras 5 linhas:\")\n",
        "  print(df.head())\n",
        "  print(\"\\nInformações do DataFrame:\")\n",
        "  buffer = io.StringIO()\n",
        "  df.info(buf=buffer)\n",
        "  print(buffer.getvalue())\n",
        "  print(\"\\nEstatísticas Descritivas:\")\n",
        "  print(df.describe())\n",
        "  print(f\"Contagem inicial de linhas: {df.shape[0]}, Colunas: {df.shape[1]}\")\n",
        "  return df, df.head().to_markdown(index=False, numalign=\"left\", stralign=\"left\"), df.describe().to_markdown(index=True, numalign=\"left\", stralign=\"left\"), buffer.getvalue(), df.shape"
      ],
      "metadata": {
        "id": "FwWfJwG_iA5M"
      },
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def clean_and_process_data(df, df_name):\n",
        "  \"\"\"Remove colunas 'Unnamed', duplicatas e trata valores ausentes.\"\"\"\n",
        "  print(f\"\\n--- Limpando e Processando {df_name} ---\")\n",
        "  cols_to_drop = [col for col in df.columns if 'Unnamed' in col] # Corrected to only target 'Unnamed'\n",
        "  if cols_to_drop:\n",
        "    print(f\"Removendo colunas: {cols_to_drop}\")\n",
        "  df = df.drop(columns=cols_to_drop)\n",
        "  initial_rows = df.shape[0]\n",
        "  df.drop_duplicates(inplace=True)\n",
        "  print(f\"Duplicatas removidas. Linhas antes: {initial_rows}, Linhas depois: {df.shape[0]}\")\n",
        "  # Ensure 'metodo' and 'ID_Metodo' are treated as strings and not converted to numeric\n",
        "  cols_to_keep_as_string = ['metodo', 'ID_Metodo']\n",
        "  # Add other known categorical columns that should not be converted to numeric\n",
        "  other_categorical_cols = ['Adicao_Metodo', 'Passagem_Agua_Reator']\n",
        "  cols_to_keep_as_string.extend(other_categorical_cols)\n",
        "\n",
        "\n",
        "  for col in df.columns:\n",
        "      if col in cols_to_keep_as_string:\n",
        "          df[col] = df[col].astype(str).replace('nan', np.nan) # Convert to string, replace 'nan' string with actual NaN\n",
        "      else:\n",
        "          if df[col].isnull().any():\n",
        "              if pd.api.types.is_numeric_dtype(df[col]):\n",
        "                  df[col].fillna(df[col].mean(), inplace=True)\n",
        "                  print(f\"NaNs na coluna numérica '{col}' preenchidos com a média.\")\n",
        "              else:\n",
        "                  # For other categorical columns, fill with mode or a placeholder like 'Unknown'\n",
        "                  mode_val = df[col].mode()[0] if not df[col].mode().empty else 'Unknown'\n",
        "                  df[col].fillna(mode_val, inplace=True)\n",
        "                  print(f\"NaNs na coluna categórica '{col}' preenchidos com o modo ({mode_val}).\")\n",
        "\n",
        "  # Specific fills for known columns\n",
        "  if 'Vazao_mL_h' in df.columns and df['Vazao_mL_h'].isnull().any():\n",
        "    df['Vazao_mL_h'].fillna(0, inplace=True)\n",
        "    print(f\"NaNs na coluna 'Vazao_mL_h' preenchidos com 0 (assumindo 'não aplicável' ou 'zero').\")\n",
        "\n",
        "  if 'Secagem_Temperatura_C' in df.columns and df['Secagem_Temperatura_C'].isnull().any():\n",
        "    df['Secagem_Temperatura_C'].fillna(25, inplace=True) # Assuming 25°C for ambient temperature\n",
        "    print(f\"NaNs na coluna 'Secagem_Temperatura_C' preenchidos com 25 (assumindo 'temperatura ambiente').\")\n",
        "\n",
        "  # Attempt to convert other object columns to numeric, coercing errors\n",
        "  for col in df.columns:\n",
        "    if col not in cols_to_keep_as_string and pd.api.types.is_object_dtype(df[col]):\n",
        "        try:\n",
        "            df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "        except:\n",
        "            pass # Do nothing if conversion is not possible\n",
        "\n",
        "  # Re-fill any NaNs introduced by the above coerce or originally present in numeric columns\n",
        "  for col in df.columns:\n",
        "      if df[col].isnull().any():\n",
        "          if pd.api.types.is_numeric_dtype(df[col]):\n",
        "              df[col].fillna(df[col].mean(), inplace=True)\n",
        "          elif col not in cols_to_keep_as_string: # Only fill non-string categorical NaNs with mode or 'Unknown'\n",
        "              mode_val = df[col].mode()[0] if not df[col].mode().empty else 'Unknown'\n",
        "              df[col].fillna(mode_val, inplace=True)\n",
        "\n",
        "\n",
        "  print(f\"Shape final de {df_name} após limpeza: {df.shape}\")\n",
        "  print(f\"NaNs em {df_name} após limpeza:\\n{df.isnull().sum()[df.isnull().sum() > 0]}\")\n",
        "  return df"
      ],
      "metadata": {
        "id": "dQrhyxWBis8P"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def consolidate_absorption_data(data_dir):\n",
        "    \"\"\"Consolida os arquivos de absorção em um único DataFrame.\"\"\"\n",
        "    absorption_files = {\n",
        "        'FCS': os.path.join(data_dir, 'Absorcao_FCS.csv'),\n",
        "        'Agua': os.path.join(data_dir, 'Absorcao_Agua.csv'),\n",
        "        # [cite_start]Changed to comma as delimiter as per prompt [cite: 74]\n",
        "        'SS_0.9%': os.path.join(data_dir, 'Absorcao_SS _0,9%.csv') # [cite: 8]\n",
        "    }\n",
        "\n",
        "    all_absorption_dfs = []\n",
        "    for liquid_type, file_path in absorption_files.items():\n",
        "        df, _, _, _, _ = load_and_inspect_data(file_path, f'Absorção ({liquid_type})', delimiter=';') # [cite: 8]\n",
        "        df = clean_and_process_data(df, f'Absorção ({liquid_type})') # [cite: 9]\n",
        "        df['Tipo_Liquido'] = liquid_type # [cite: 9]\n",
        "        all_absorption_dfs.append(df) # [cite: 9]\n",
        "\n",
        "    df_absorcao_consolidado = pd.concat(all_absorption_dfs, ignore_index=True) # [cite: 9]\n",
        "    print(\"\\n--- DataFrame de Absorção Consolidado ---\")\n",
        "    print(df_absorcao_consolidado.info())\n",
        "    print(df_absorcao_consolidado.head())\n",
        "    print(f\"NaNs em DataFrame de Absorção Consolidado:\\n{df_absorcao_consolidado.isnull().sum()[df_absorcao_consolidado.isnull().sum() > 0]}\")\n",
        "    return df_absorcao_consolidado"
      ],
      "metadata": {
        "id": "Qpb6dgBMkOHs"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def consolidate_mass_loss_data(data_dir):\n",
        "    \"\"\"Consolida os arquivos de perda de massa em um único DataFrame.\"\"\"\n",
        "    mass_loss_files = {\n",
        "        'Agua': os.path.join(data_dir, 'perda_massa_Agua.csv'), # [cite: 10]\n",
        "        'FCS': os.path.join(data_dir, 'Perda_massa_FCS.csv'), # [cite: 10]\n",
        "        'SS_0.9%': os.path.join(data_dir, 'perda_massa_SS_0.9%.csv') # [cite: 10]\n",
        "    }\n",
        "\n",
        "    all_mass_loss_dfs = []\n",
        "    for liquid_type, file_path in mass_loss_files.items():\n",
        "        # [cite_start]Changed to comma as delimiter as per prompt [cite: 74]\n",
        "        df, _, _, _, _ = load_and_inspect_data(file_path, f'Perda de Massa ({liquid_type})', delimiter=';') # [cite: 10]\n",
        "        df = clean_and_process_data(df, f'Perda de Massa ({liquid_type})') # [cite: 11]\n",
        "        df['Tipo_Liquido'] = liquid_type # [cite: 11]\n",
        "        all_mass_loss_dfs.append(df) # [cite: 11]\n",
        "\n",
        "    df_perda_consolidado = pd.concat(all_mass_loss_dfs, ignore_index=True) # [cite: 11]\n",
        "    print(\"\\n--- DataFrame de Perda de Massa Consolidado ---\")\n",
        "    print(df_perda_consolidado.info())\n",
        "    print(df_perda_consolidado.head())\n",
        "    print(f\"NaNs em DataFrame de Perda de Massa Consolidado:\\n{df_perda_consolidado.isnull().sum()[df_perda_consolidado.isnull().sum() > 0]}\")\n",
        "    return df_perda_consolidado"
      ],
      "metadata": {
        "id": "k8i5hOYckcri"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def load_and_process_methods_data(data_dir):\n",
        "    \"\"\"Carrega e processa os dados de métodos de obtenção.\"\"\"\n",
        "    file_path = os.path.join(data_dir, 'metodos_obtencao_biopolimeros.csv') # [cite: 12]\n",
        "    # [cite_start]Changed to comma as delimiter as per prompt [cite: 74]\n",
        "    df_metodos, _, _, _, _ = load_and_inspect_data(file_path, 'Métodos de Obtenção', encoding='latin1', delimiter=';') # [cite: 12]\n",
        "    df_metodos = clean_and_process_data(df_metodos, 'Métodos de Obtenção') # [cite: 12]\n",
        "    print(f\"NaNs em df_metodos após limpeza:\\n{df_metodos.isnull().sum()[df_metodos.isnull().sum() > 0]}\")\n",
        "    return df_metodos"
      ],
      "metadata": {
        "id": "viudP_59kmLz"
      },
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def transform_to_long_format(df, id_vars, value_vars_prefix, new_col_name, time_col_name):\n",
        "    \"\"\"Transforma o DataFrame do formato largo para o longo.\"\"\"\n",
        "    print(f\"\\n--- Transformando para formato longo: {new_col_name} ---\")\n",
        "    # Identificar colunas de tempo e valor\n",
        "    value_vars = [col for col in df.columns if any(col.startswith(prefix) for prefix in value_vars_prefix)] # [cite: 12]\n",
        "\n",
        "    # [cite_start]Realizar o melt [cite: 13]\n",
        "    df_long = pd.melt(df, id_vars=id_vars, value_vars=value_vars, var_name='Tempo_Var', value_name=new_col_name) # [cite: 13]\n",
        "\n",
        "    # Extrair o tempo da coluna Tempo_Var\n",
        "    df_long[time_col_name] = df_long['Tempo_Var'].str.extract(r'(\\d+)h').astype(float) # [cite: 13]\n",
        "\n",
        "    # Remover a coluna Tempo_Var original\n",
        "    df_long = df_long.drop(columns=['Tempo_Var']) # [cite: 13]\n",
        "\n",
        "    print(df_long.info())\n",
        "    print(df_long.head())\n",
        "    print(f\"NaNs em df_long ({new_col_name}) após transformação para formato longo:\\n{df_long.isnull().sum()[df_long.isnull().sum() > 0]}\")\n",
        "    return df_long"
      ],
      "metadata": {
        "id": "48kpX-_Vktxy"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def integrate_data(df_main, df_methods):\n",
        "    \"\"\"Integra o DataFrame principal com os dados de métodos de obtenção.\"\"\"\n",
        "    print(\"\\n--- Integrando dados com métodos de obtenção ---\") # [cite: 14]\n",
        "    # Garantir que as colunas de merge tenham o mesmo tipo e formato\n",
        "    df_main['metodo'] = df_main['metodo'].astype(str).str.strip() # [cite: 14]\n",
        "    df_methods['ID_Metodo'] = df_methods['ID_Metodo'].astype(str).str.strip() # [cite: 14]\n",
        "\n",
        "    print(f\"Unique values in df_main['metodo']: {df_main['metodo'].unique()}\") # [cite: 14]\n",
        "    print(f\"Unique values in df_methods['ID_Metodo']: {df_methods['ID_Metodo'].unique()}\") # [cite: 14]\n",
        "\n",
        "    # Merge apenas por 'metodo' e 'ID_Metodo'\n",
        "    df_integrated = pd.merge(df_main, df_methods, left_on='metodo', right_on='ID_Metodo', how='left') # [cite: 14]\n",
        "    print(df_integrated.info())\n",
        "    print(df_integrated.head())\n",
        "    print(f\"NaNs em df_integrated após merge:\\n{df_integrated.isnull().sum()[df_integrated.isnull().sum() > 0]}\")\n",
        "    return df_integrated"
      ],
      "metadata": {
        "id": "YcyFMhVIk22p"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def integrate_data(df_main, df_methods):\n",
        "    \"\"\"Integra o DataFrame principal com os dados de métodos de obtenção.\"\"\"\n",
        "    print(\"\\n--- Integrando dados com métodos de obtenção ---\") # [cite: 14]\n",
        "    # Garantir que as colunas de merge tenham o mesmo tipo e formato\n",
        "    df_main['metodo'] = df_main['metodo'].astype(str).str.strip() # [cite: 14]\n",
        "    df_methods['ID_Metodo'] = df_methods['ID_Metodo'].astype(str).str.strip().str.replace(' ', '') # Remove space from ID_Metodo\n",
        "\n",
        "    print(f\"Unique values in df_main['metodo']: {df_main['metodo'].unique()}\") # [cite: 14]\n",
        "    print(f\"Unique values in df_methods['ID_Metodo']: {df_methods['ID_Metodo'].unique()}\") # [cite: 14]\n",
        "\n",
        "    # Merge apenas por 'metodo' e 'ID_Metodo'\n",
        "    df_integrated = pd.merge(df_main, df_methods, left_on='metodo', right_on='ID_Metodo', how='left') # [cite: 14]\n",
        "    print(df_integrated.info())\n",
        "    print(df_integrated.head())\n",
        "    print(f\"NaNs em df_integrated após merge:\\n{df_integrated.isnull().sum()[df_integrated.isnull().sum() > 0]}\")\n",
        "    return df_integrated"
      ],
      "metadata": {
        "id": "0234_9bxlhZc"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def perform_eda_and_visualizations(df_absorcao, df_perda, reports_dir):\n",
        "    \"\"\"Realiza a Análise Exploratória de Dados (EDA) e gera visualizações.\"\"\"\n",
        "    print(\"\\n--- Realizando Análise Exploratória de Dados (EDA) ---\") # [cite: 15]\n",
        "\n",
        "    # 1. Distribuição das variáveis numéricas chave\n",
        "    print(\"\\n1. Distribuição das variáveis numéricas chave\") # [cite: 16]\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.histplot(df_absorcao['CW_gg_Unificado'], kde=True)\n",
        "    plt.title('Distribuição de Cw (Absorção)')\n",
        "    plt.xlabel('Cw (g/g)')\n",
        "    plt.ylabel('Frequência')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(reports_dir, 'distribuicao_cw_absorcao.png')) # [cite: 16]\n",
        "    plt.close()\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.histplot(df_perda['Mp_Percentual_Unificado'], kde=True)\n",
        "    plt.title('Distribuição de Mp (Perda de Massa)')\n",
        "    plt.xlabel('Mp (%)')\n",
        "    plt.ylabel('Frequência')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(reports_dir, 'distribuicao_mp_perda_massa.png')) # [cite: 16]\n",
        "    plt.close()\n",
        "\n",
        "    # 2. Relação entre Tempo e Absorção/Perda de Massa por Tipo de Líquido\n",
        "    print(\"\\n2. Relação entre Tempo e Absorção/Perda de Massa por Tipo de Líquido\") # [cite: 17]\n",
        "    plt.figure(figsize=(12, 7))\n",
        "    sns.lineplot(data=df_absorcao, x='Tempo_h', y='CW_gg_Unificado', hue='Tipo_Liquido', errorbar='sd')\n",
        "    plt.title('Cw (Absorção) ao longo do Tempo por Tipo de Líquido')\n",
        "    plt.xlabel('Tempo (h)')\n",
        "    plt.ylabel('Cw (g/g)')\n",
        "    plt.savefig(os.path.join(reports_dir, 'cw_tempo_tipo_liquido.png')) # [cite: 17]\n",
        "    plt.close()\n",
        "\n",
        "    plt.figure(figsize=(12, 7))\n",
        "    sns.lineplot(data=df_perda, x='Tempo_h', y='Mp_Percentual_Unificado', hue='Tipo_Liquido', errorbar='sd')\n",
        "    plt.title('Mp (Perda de Massa) ao longo do Tempo por Tipo de Líquido')\n",
        "    plt.xlabel('Tempo (h)') # [cite: 18]\n",
        "    plt.ylabel('Mp (%)') # [cite: 18]\n",
        "    plt.savefig(os.path.join(reports_dir, 'mp_tempo_tipo_liquido.png')) # [cite: 18]\n",
        "    plt.close()\n",
        "\n",
        "    # 3. Comparação de Absorção/Perda de Massa por Método de Obtenção\n",
        "    print(\"\\n3. Comparação de Absorção/Perda de Massa por Método de Obtenção\") # [cite: 19]\n",
        "    plt.figure(figsize=(12, 7))\n",
        "    sns.boxplot(data=df_absorcao, x='metodo', y='CW_gg_Unificado')\n",
        "    plt.title('Cw (Absorção) por Método de Obtenção')\n",
        "    plt.xlabel('Método de Obtenção')\n",
        "    plt.ylabel('Cw (g/g)')\n",
        "    plt.xticks(rotation=45, ha='right')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(reports_dir, 'cw_metodo_obtencao.png')) # [cite: 19]\n",
        "    plt.close()\n",
        "\n",
        "    plt.figure(figsize=(12, 7))\n",
        "    sns.boxplot(data=df_perda, x='metodo', y='Mp_Percentual_Unificado')\n",
        "    plt.title('Mp (Perda de Massa) por Método de Obtenção')\n",
        "    plt.xlabel('Método de Obtenção')\n",
        "    plt.ylabel('Mp (%)')\n",
        "    plt.xticks(rotation=45, ha='right')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(reports_dir, 'mp_metodo_obtencao.png')) # [cite: 19]\n",
        "    plt.close()\n",
        "\n",
        "    # 4. Correlação entre variáveis numéricas (ex: massa_seca_inicial vs Cw/Mp)\n",
        "    print(\"\\n4. Correlação entre variáveis numéricas\") # [cite: 20]\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    sns.scatterplot(data=df_absorcao, x='massa_seca_inicial', y='CW_gg_Unificado', hue='Tipo_Liquido', alpha=0.7)\n",
        "    plt.title('Massa Seca Inicial vs Cw (Absorção)')\n",
        "    plt.xlabel('Massa Seca Inicial (g)')\n",
        "    plt.ylabel('Cw (g/g)')\n",
        "    plt.savefig(os.path.join(reports_dir, 'massa_seca_inicial_vs_cw.png')) # [cite: 20]\n",
        "    plt.close()\n",
        "\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    sns.scatterplot(data=df_perda, x='peso_seco_inicial', y='Mp_Percentual_Unificado', hue='Tipo_Liquido', alpha=0.7)\n",
        "    plt.title('Peso Seco Inicial vs Mp (Perda de Massa)')\n",
        "    plt.xlabel('Peso Seco Inicial (g)')\n",
        "    plt.ylabel('Mp (%)')\n",
        "    plt.savefig(os.path.join(reports_dir, 'peso_seco_inicial_vs_mp.png')) # [cite: 20]\n",
        "    plt.close()\n",
        "\n",
        "    # --- NEW EDA: Incorporating Obtaining Features ---\n",
        "    # Define obtaining features for plotting. Adjust names based on actual columns after merge\n",
        "    obtaining_numeric_features = [\n",
        "        'Concentracao_Quitosana_pct', 'Vazao_mL_h', 'Secagem_Temperatura_C',\n",
        "        'pH', 'Tempo_Agitacao_h', 'Velocidade_Agitacao_rpm', 'Pressao_kPa'\n",
        "    ]\n",
        "    obtaining_categorical_features = ['Adicao_Metodo', 'Passagem_Agua_Reator']\n",
        "\n",
        "    obtaining_numeric_features_abs_exist = [f for f in obtaining_numeric_features if f in df_absorcao.columns]\n",
        "    obtaining_categorical_features_abs_exist = [f for f in obtaining_categorical_features if f in df_absorcao.columns]\n",
        "    obtaining_numeric_features_perda_exist = [f for f in obtaining_numeric_features if f in df_perda.columns]\n",
        "    obtaining_categorical_features_perda_exist = [f for f in obtaining_categorical_features if f in df_perda.columns]\n",
        "\n",
        "    # 5. Relação com Novas Features de Obtenção (Scatter plots for numeric)\n",
        "    print(\"\\n5. Relação entre Variáveis de Obtenção Numéricas e Targets\")\n",
        "    for feature in obtaining_numeric_features_abs_exist:\n",
        "        plt.figure(figsize=(10, 6))\n",
        "        sns.scatterplot(data=df_absorcao, x=feature, y='CW_gg_Unificado', hue='Tipo_Liquido', alpha=0.7)\n",
        "        plt.title(f'Cw (Absorção) vs. {feature.replace(\"_\", \" \")}')\n",
        "        plt.xlabel(feature.replace('_', ' '))\n",
        "        plt.ylabel('Cw (g/g)')\n",
        "        plt.tight_layout()\n",
        "        plt.savefig(os.path.join(reports_dir, f'cw_vs_{feature.lower()}.png'))\n",
        "        plt.close()\n",
        "\n",
        "    for feature in obtaining_numeric_features_perda_exist:\n",
        "        plt.figure(figsize=(10, 6))\n",
        "        sns.scatterplot(data=df_perda, x=feature, y='Mp_Percentual_Unificado', hue='Tipo_Liquido', alpha=0.7)\n",
        "        plt.title(f'Mp (Perda de Massa) vs. {feature.replace(\"_\", \" \")}')\n",
        "        plt.xlabel(feature.replace('_', ' '))\n",
        "        plt.ylabel('Mp (%)')\n",
        "        plt.tight_layout()\n",
        "        plt.savefig(os.path.join(reports_dir, f'mp_vs_{feature.lower()}.png'))\n",
        "        plt.close()\n",
        "\n",
        "    # 6. Box/Violin Plots para Features Categóricas de Obtenção\n",
        "    print(\"\\n6. Comparação de Cw/Mp por Features de Obtenção Categóricas\")\n",
        "    for feature in obtaining_categorical_features_abs_exist:\n",
        "        plt.figure(figsize=(12, 7))\n",
        "        sns.boxplot(data=df_absorcao, x=feature, y='CW_gg_Unificado')\n",
        "        plt.title(f'Cw (Absorção) por {feature.replace(\"_\", \" \")}')\n",
        "        plt.xlabel(feature.replace('_', ' '))\n",
        "        plt.ylabel('Cw (g/g)')\n",
        "        plt.xticks(rotation=45, ha='right')\n",
        "        plt.tight_layout()\n",
        "        plt.savefig(os.path.join(reports_dir, f'cw_boxplot_{feature.lower()}.png'))\n",
        "        plt.close()\n",
        "\n",
        "    for feature in obtaining_categorical_features_perda_exist:\n",
        "        plt.figure(figsize=(12, 7))\n",
        "        sns.boxplot(data=df_perda, x=feature, y='Mp_Percentual_Unificado')\n",
        "        plt.title(f'Mp (Perda de Massa) por {feature.replace(\"_\", \" \")}')\n",
        "        plt.xlabel(feature.replace('_', ' '))\n",
        "        plt.ylabel('Mp (%)')\n",
        "        plt.xticks(rotation=45, ha='right')\n",
        "        plt.tight_layout()\n",
        "        plt.savefig(os.path.join(reports_dir, f'mp_boxplot_{feature.lower()}.png'))\n",
        "        plt.close()\n",
        "\n",
        "    # 7. Histograms for all numeric features (including obtaining features)\n",
        "    print(\"\\n7. Distribuições de Features Numéricas\")\n",
        "    all_numeric_cols_abs = df_absorcao.select_dtypes(include=np.number).columns.tolist()\n",
        "    all_numeric_cols_perda = df_perda.select_dtypes(include=np.number).columns.tolist()\n",
        "\n",
        "    for col in all_numeric_cols_abs:\n",
        "        # Avoid replotting already plotted key variables\n",
        "        if col not in ['Tempo_h', 'CW_gg_Unificado', 'massa_seca_inicial']:\n",
        "            plt.figure(figsize=(8, 5))\n",
        "            sns.histplot(df_absorcao[col].dropna(), kde=True)\n",
        "            plt.title(f'Distribuição de {col.replace(\"_\", \" \")}')\n",
        "            plt.xlabel(col.replace('_', ' '))\n",
        "            plt.ylabel('Frequência')\n",
        "            plt.tight_layout()\n",
        "            plt.savefig(os.path.join(reports_dir, f'hist_{col.lower()}.png'))\n",
        "            plt.close()\n",
        "\n",
        "    for col in all_numeric_cols_perda:\n",
        "        # Avoid replotting already plotted key variables\n",
        "        if col not in ['Tempo_h', 'Mp_Percentual_Unificado', 'peso_seco_inicial']:\n",
        "            plt.figure(figsize=(8, 5))\n",
        "            sns.histplot(df_perda[col].dropna(), kde=True)\n",
        "            plt.title(f'Distribuição de {col.replace(\"_\", \" \")}')\n",
        "            plt.xlabel(col.replace('_', ' '))\n",
        "            plt.ylabel('Frequência')\n",
        "            plt.tight_layout()\n",
        "            plt.savefig(os.path.join(reports_dir, f'hist_{col.lower()}.png'))\n",
        "            plt.close()\n",
        "\n",
        "    # 8. Correlation Heatmaps\n",
        "    print(\"\\n8. Heatmaps de Correlação entre Variáveis Numéricas\")\n",
        "    plt.figure(figsize=(14, 12))\n",
        "    sns.heatmap(df_absorcao[all_numeric_cols_abs].corr(), annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=.5)\n",
        "    plt.title('Heatmap de Correlação - Dados de Absorção (com Features de Obtenção)')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(reports_dir, 'heatmap_correlacao_absorcao.png'))\n",
        "    plt.close()\n",
        "\n",
        "    plt.figure(figsize=(14, 12))\n",
        "    sns.heatmap(df_perda[all_numeric_cols_perda].corr(), annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=.5)\n",
        "    plt.title('Heatmap de Correlação - Dados de Perda de Massa (com Features de Obtenção)')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(reports_dir, 'heatmap_correlacao_perda_massa.png'))\n",
        "    plt.close()\n",
        "\n",
        "    print(\"Visualizações geradas e salvas na pasta reports.\")"
      ],
      "metadata": {
        "id": "fEr3CaJRltup"
      },
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def implement_predictive_models(df_absorcao, df_perda, reports_dir):\n",
        "    \"\"\"Implementa modelos preditivos para Cw e Mp.\"\"\"\n",
        "    print(\"\\n--- Implementando Modelos Preditivos ---\") # [cite: 21]\n",
        "\n",
        "    model_results = {\n",
        "        'absorption': {},\n",
        "        'mass_loss': {}\n",
        "    }\n",
        "    best_models = {}\n",
        "\n",
        "    # Define all potential features, including those from methods of obtaining\n",
        "    # Ensure these are the actual column names in the integrated dataframes.\n",
        "    obtaining_numeric_features = [\n",
        "        'Concentracao_Quitosana_pct', 'Vazao_mL_h', 'Secagem_Temperatura_C',\n",
        "        'pH', 'Tempo_Agitacao_h', 'Velocidade_Agitacao_rpm', 'Pressao_kPa'\n",
        "    ]\n",
        "    obtaining_categorical_features = ['Adicao_Metodo', 'Passagem_Agua_Reator'] # Example categorical, add others if present\n",
        "\n",
        "    # Target columns\n",
        "    target_absorcao = 'CW_gg_Unificado' # [cite: 21]\n",
        "    target_perda = 'Mp_Percentual_Unificado' # [cite: 26]\n",
        "\n",
        "    # --- Absorption Model (CW) ---\n",
        "    print(\"\\n--- Modelagem para Absorção (Cw) ---\")\n",
        "\n",
        "    # Select features that exist in the dataframe and are relevant\n",
        "    numeric_features_abs = ['Tempo_h', 'massa_seca_inicial'] + [col for col in obtaining_numeric_features if col in df_absorcao.columns]\n",
        "    categorical_features_abs = ['Tipo_Liquido', 'metodo'] + [col for col in obtaining_categorical_features if col in df_absorcao.columns]\n",
        "\n",
        "    # Drop columns that are definitely not features for prediction\n",
        "    cols_to_drop_from_features_abs = ['id_amostra', 'Massa_Umida_Final_Unificado', 'ID_Metodo'] # ID_Metodo is redundant after merge\n",
        "    all_features_to_encode_abs = numeric_features_abs + categorical_features_abs\n",
        "\n",
        "    # Create a copy to avoid SettingWithCopyWarning\n",
        "    df_absorcao_processed = df_absorcao[all_features_to_encode_abs + [target_absorcao]].copy()\n",
        "\n",
        "    # Handle NaNs in the final feature set before one-hot encoding, if any remain\n",
        "    # This might be needed if original data had NaNs in obtaining features that weren't caught by specific fills\n",
        "    for col in df_absorcao_processed.columns:\n",
        "        if df_absorcao_processed[col].isnull().any():\n",
        "            if pd.api.types.is_numeric_dtype(df_absorcao_processed[col]):\n",
        "                df_absorcao_processed[col].fillna(df_absorcao_processed[col].mean(), inplace=True)\n",
        "            else:\n",
        "                mode_val = df_absorcao_processed[col].mode()[0]\n",
        "                df_absorcao_processed[col].fillna(mode_val, inplace=True)\n",
        "\n",
        "    # One-hot encode categorical features [cite: 22]\n",
        "    df_absorcao_encoded = pd.get_dummies(df_absorcao_processed, columns=categorical_features_abs, drop_first=True)\n",
        "\n",
        "    # Drop target from X for modeling\n",
        "    X_abs = df_absorcao_encoded.drop(columns=[target_absorcao])\n",
        "    y_abs = df_absorcao_encoded[target_absorcao]\n",
        "\n",
        "    # Handle any remaining NaNs after encoding (e.g., if a category became NaN after dropna during encoding)\n",
        "    # This is critical as models don't handle NaNs well\n",
        "    X_abs = X_abs.dropna(axis=1, how='all') # Drop columns that are all NaN\n",
        "    y_abs = y_abs[X_abs.index] # Align y with X\n",
        "\n",
        "    # Drop rows where target is NaN (if any)\n",
        "    nan_target_rows = y_abs.isnull()\n",
        "    if nan_target_rows.any():\n",
        "        print(f\"Removing {nan_target_rows.sum()} rows with NaN targets in absorption data.\")\n",
        "        X_abs = X_abs[~nan_target_rows]\n",
        "        y_abs = y_abs[~nan_target_rows]\n",
        "\n",
        "\n",
        "    print(f\"Shape de X_abs depois do pré-processamento: {X_abs.shape}\") # [cite: 24]\n",
        "    print(f\"Shape de y_abs depois do pré-processamento: {y_abs.shape}\") # [cite: 24]\n",
        "\n",
        "    if X_abs.empty or y_abs.empty:\n",
        "        print(\"Dados de absorção insuficientes para modelagem após tratamento de NaNs.\")\n",
        "    else:\n",
        "        X_train_abs, X_test_abs, y_train_abs, y_test_abs = train_test_split(X_abs, y_abs, test_size=0.2, random_state=42) # [cite: 24]\n",
        "        print(f\"Shape de X_train_abs: {X_train_abs.shape}, y_train_abs: {y_train_abs.shape}\") # [cite: 24]\n",
        "        print(\"Iniciando treinamento dos modelos de absorção...\")\n",
        "\n",
        "        # Linear Regression\n",
        "        model_lr_abs = LinearRegression()\n",
        "        model_lr_abs.fit(X_train_abs, y_train_abs)\n",
        "        y_pred_lr_abs = model_lr_abs.predict(X_test_abs)\n",
        "        model_results['absorption']['LinearRegression'] = {\n",
        "            'R2': r2_score(y_test_abs, y_pred_lr_abs),\n",
        "            'RMSE': np.sqrt(mean_squared_error(y_test_abs, y_pred_lr_abs)),\n",
        "            'MAE': mean_absolute_error(y_test_abs, y_pred_lr_abs)\n",
        "        }\n",
        "        print(f\"\\nModelo de Absorção (Cw) - Linear Regression - R²: {model_results['absorption']['LinearRegression']['R2']:.4f}, RMSE: {model_results['absorption']['LinearRegression']['RMSE']:.4f}, MAE: {model_results['absorption']['LinearRegression']['MAE']:.4f}\")\n",
        "\n",
        "        # RandomForestRegressor with GridSearchCV\n",
        "        param_grid_rf = {'n_estimators': [50, 100], 'max_depth': [5, 10]} # Reduced for quicker execution\n",
        "        grid_search_rf_abs = GridSearchCV(RandomForestRegressor(random_state=42), param_grid_rf, cv=3, n_jobs=-1, scoring='r2')\n",
        "        grid_search_rf_abs.fit(X_train_abs, y_train_abs)\n",
        "        model_rf_abs = grid_search_rf_abs.best_estimator_\n",
        "        y_pred_rf_abs = model_rf_abs.predict(X_test_abs)\n",
        "        model_results['absorption']['RandomForest'] = {\n",
        "            'Best_Params': grid_search_rf_abs.best_params_,\n",
        "            'R2': r2_score(y_test_abs, y_pred_rf_abs),\n",
        "            'RMSE': np.sqrt(mean_squared_error(y_test_abs, y_pred_rf_abs)),\n",
        "            'MAE': mean_absolute_error(y_test_abs, y_pred_rf_abs)\n",
        "        }\n",
        "        print(f\"\\nModelo de Absorção (Cw) - RandomForest (Best Params: {model_results['absorption']['RandomForest']['Best_Params']}) - R²: {model_results['absorption']['RandomForest']['R2']:.4f}, RMSE: {model_results['absorption']['RandomForest']['RMSE']:.4f}, MAE: {model_results['absorption']['RandomForest']['MAE']:.4f}\")\n",
        "\n",
        "        # GradientBoostingRegressor with GridSearchCV\n",
        "        param_grid_gb = {'n_estimators': [50, 100], 'learning_rate': [0.05, 0.1]} # Reduced for quicker execution\n",
        "        grid_search_gb_abs = GridSearchCV(GradientBoostingRegressor(random_state=42), param_grid_gb, cv=3, n_jobs=-1, scoring='r2')\n",
        "        grid_search_gb_abs.fit(X_train_abs, y_train_abs)\n",
        "        model_gb_abs = grid_search_gb_abs.best_estimator_\n",
        "        y_pred_gb_abs = model_gb_abs.predict(X_test_abs)\n",
        "        model_results['absorption']['GradientBoosting'] = {\n",
        "            'Best_Params': grid_search_gb_abs.best_params_,\n",
        "            'R2': r2_score(y_test_abs, y_pred_gb_abs),\n",
        "            'RMSE': np.sqrt(mean_squared_error(y_test_abs, y_pred_gb_abs)),\n",
        "            'MAE': mean_absolute_error(y_test_abs, y_pred_gb_abs)\n",
        "        }\n",
        "        print(f\"\\nModelo de Absorção (Cw) - GradientBoosting (Best Params: {model_results['absorption']['GradientBoosting']['Best_Params']}) - R²: {model_results['absorption']['GradientBoosting']['R2']:.4f}, RMSE: {model_results['absorption']['GradientBoosting']['RMSE']:.4f}, MAE: {model_results['absorption']['GradientBoosting']['MAE']:.4f}\")\n",
        "\n",
        "        # Select best model for absorption based on R2\n",
        "        best_abs_model_name = max(model_results['absorption'], key=lambda k: model_results['absorption'][k]['R2'] if 'R2' in model_results['absorption'][k] else -np.inf)\n",
        "        if best_abs_model_name == 'LinearRegression': best_models['absorption'] = model_lr_abs\n",
        "        elif best_abs_model_name == 'RandomForest': best_models['absorption'] = model_rf_abs\n",
        "        else: best_models['absorption'] = model_gb_abs\n",
        "\n",
        "        # Feature Importance for the best ensemble model (if applicable)\n",
        "        if hasattr(best_models['absorption'], 'feature_importances_'):\n",
        "            importances_abs = best_models['absorption'].feature_importances_\n",
        "            feature_names_abs = X_abs.columns\n",
        "            feature_importance_df_abs = pd.DataFrame({'Feature': feature_names_abs, 'Importance': importances_abs}).sort_values(by='Importance', ascending=False)\n",
        "            model_results['absorption']['Feature_Importance'] = feature_importance_df_abs.to_dict('records')\n",
        "\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            sns.barplot(x='Importance', y='Feature', data=feature_importance_df_abs.head(10))\n",
        "            plt.title(f'Top 10 Feature Importances - Absorção ({best_abs_model_name})')\n",
        "            plt.tight_layout()\n",
        "            plt.savefig(os.path.join(reports_dir, 'feature_importance_absorption.png'))\n",
        "            plt.close()\n",
        "\n",
        "        # Real vs Predicted Plot for Absorption\n",
        "        plt.figure(figsize=(8, 6))\n",
        "        plt.scatter(y_test_abs, best_models['absorption'].predict(X_test_abs), alpha=0.6)\n",
        "        plt.plot([y_test_abs.min(), y_test_abs.max()], [y_test_abs.min(), y_test_abs.max()], 'r--')\n",
        "        plt.title(f'Real vs. Previsto - Absorção ({best_abs_model_name})')\n",
        "        plt.xlabel('Valor Real de Cw (g/g)')\n",
        "        plt.ylabel('Valor Previsto de Cw (g/g)')\n",
        "        plt.savefig(os.path.join(reports_dir, 'real_vs_predicted_absorption.png'))\n",
        "        plt.close()\n",
        "\n",
        "    # --- Mass Loss Model (Mp) ---\n",
        "    print(\"\\n--- Modelagem para Perda de Massa (Mp) ---\")\n",
        "\n",
        "    numeric_features_perda = ['Tempo_h', 'peso_seco_inicial'] + [col for col in obtaining_numeric_features if col in df_perda.columns]\n",
        "    categorical_features_perda = ['Tipo_Liquido', 'metodo'] + [col for col in obtaining_categorical_features if col in df_perda.columns]\n",
        "\n",
        "    cols_to_drop_from_features_perda = ['id_amostra', 'Peso_Seco_Final_Unificado', 'ID_Metodo']\n",
        "    all_features_to_encode_perda = numeric_features_perda + categorical_features_perda\n",
        "\n",
        "    df_perda_processed = df_perda[all_features_to_encode_perda + [target_perda]].copy()\n",
        "\n",
        "    for col in df_perda_processed.columns:\n",
        "        if df_perda_processed[col].isnull().any():\n",
        "            if pd.api.types.is_numeric_dtype(df_perda_processed[col]):\n",
        "                df_perda_processed[col].fillna(df_perda_processed[col].mean(), inplace=True)\n",
        "            else:\n",
        "                mode_val = df_perda_processed[col].mode()[0]\n",
        "                df_perda_processed[col].fillna(mode_val, inplace=True)\n",
        "\n",
        "    df_perda_encoded = pd.get_dummies(df_perda_processed, columns=categorical_features_perda, drop_first=True)\n",
        "\n",
        "    X_perda = df_perda_encoded.drop(columns=[target_perda])\n",
        "    y_perda = df_perda_encoded[target_perda]\n",
        "\n",
        "    X_perda = X_perda.dropna(axis=1, how='all')\n",
        "    y_perda = y_perda[X_perda.index]\n",
        "\n",
        "    nan_target_rows_perda = y_perda.isnull()\n",
        "    if nan_target_rows_perda.any():\n",
        "        print(f\"Removing {nan_target_rows_perda.sum()} rows with NaN targets in mass loss data.\")\n",
        "        X_perda = X_perda[~nan_target_rows_perda]\n",
        "        y_perda = y_perda[~nan_target_rows_perda]\n",
        "\n",
        "    print(f\"Shape de X_perda depois do pré-processamento: {X_perda.shape}\") # [cite: 28]\n",
        "    print(f\"Shape de y_perda depois do pré-processamento: {y_perda.shape}\") # [cite: 28]\n",
        "\n",
        "    if X_perda.empty or y_perda.empty:\n",
        "        print(\"Dados de perda de massa insuficientes para modelagem após tratamento de NaNs.\")\n",
        "    else:\n",
        "        X_train_perda, X_test_perda, y_train_perda, y_test_perda = train_test_split(X_perda, y_perda, test_size=0.2, random_state=42) # [cite: 28]\n",
        "        print(f\"Shape de X_train_perda: {X_train_perda.shape}, y_train_perda: {y_train_perda.shape}\") # [cite: 28]\n",
        "        print(\"Iniciando treinamento dos modelos de perda de massa...\")\n",
        "\n",
        "        # Linear Regression\n",
        "        model_lr_perda = LinearRegression()\n",
        "        model_lr_perda.fit(X_train_perda, y_train_perda)\n",
        "        y_pred_lr_perda = model_lr_perda.predict(X_test_perda)\n",
        "        model_results['mass_loss']['LinearRegression'] = {\n",
        "            'R2': r2_score(y_test_perda, y_pred_lr_perda),\n",
        "            'RMSE': np.sqrt(mean_squared_error(y_test_perda, y_pred_lr_perda)),\n",
        "            'MAE': mean_absolute_error(y_test_perda, y_pred_lr_perda)\n",
        "        }\n",
        "        print(f\"\\nModelo de Perda de Massa (Mp) - Linear Regression - R²: {model_results['mass_loss']['LinearRegression']['R2']:.4f}, RMSE: {model_results['mass_loss']['LinearRegression']['RMSE']:.4f}, MAE: {model_results['mass_loss']['LinearRegression']['MAE']:.4f}\")\n",
        "\n",
        "        # RandomForestRegressor with GridSearchCV\n",
        "        grid_search_rf_perda = GridSearchCV(RandomForestRegressor(random_state=42), param_grid_rf, cv=3, n_jobs=-1, scoring='r2')\n",
        "        grid_search_rf_perda.fit(X_train_perda, y_train_perda)\n",
        "        model_rf_perda = grid_search_rf_perda.best_estimator_\n",
        "        y_pred_rf_perda = model_rf_perda.predict(X_test_perda)\n",
        "        model_results['mass_loss']['RandomForest'] = {\n",
        "            'Best_Params': grid_search_rf_perda.best_params_,\n",
        "            'R2': r2_score(y_test_perda, y_pred_rf_perda),\n",
        "            'RMSE': np.sqrt(mean_squared_error(y_test_perda, y_pred_rf_perda)),\n",
        "            'MAE': mean_absolute_error(y_test_perda, y_pred_rf_perda)\n",
        "        }\n",
        "        print(f\"\\nModelo de Perda de Massa (Mp) - RandomForest (Best Params: {model_results['mass_loss']['RandomForest']['Best_Params']}) - R²: {model_results['mass_loss']['RandomForest']['R2']:.4f}, RMSE: {model_results['mass_loss']['RandomForest']['RMSE']:.4f}, MAE: {model_results['mass_loss']['RandomForest']['MAE']:.4f}\")\n",
        "\n",
        "        # GradientBoostingRegressor with GridSearchCV\n",
        "        grid_search_gb_perda = GridSearchCV(GradientBoostingRegressor(random_state=42), param_grid_gb, cv=3, n_jobs=-1, scoring='r2')\n",
        "        grid_search_gb_perda.fit(X_train_perda, y_train_perda)\n",
        "        model_gb_perda = grid_search_gb_perda.best_estimator_\n",
        "        y_pred_gb_perda = model_gb_perda.predict(X_test_perda)\n",
        "        model_results['mass_loss']['GradientBoosting'] = {\n",
        "            'Best_Params': grid_search_gb_perda.best_params_,\n",
        "            'R2': r2_score(y_test_perda, y_pred_gb_perda),\n",
        "            'RMSE': np.sqrt(mean_squared_error(y_test_perda, y_pred_gb_perda)),\n",
        "            'MAE': mean_absolute_error(y_test_perda, y_pred_gb_perda)\n",
        "        }\n",
        "        print(f\"Modelo de Perda de Massa (Mp) - GradientBoosting (Best Params: {model_results['mass_loss']['GradientBoosting']['Best_Params']}) - R²: {model_results['mass_loss']['GradientBoosting']['R2']:.4f}, RMSE: {model_results['mass_loss']['GradientBoosting']['RMSE']:.4f}, MAE: {model_results['mass_loss']['GradientBoosting']['MAE']:.4f}\") # [cite: 29]\n",
        "\n",
        "        # Select best model for mass loss\n",
        "        best_perda_model_name = max(model_results['mass_loss'], key=lambda k: model_results['mass_loss'][k]['R2'] if 'R2' in model_results['mass_loss'][k] else -np.inf)\n",
        "        if best_perda_model_name == 'LinearRegression': best_models['mass_loss'] = model_lr_perda\n",
        "        elif best_perda_model_name == 'RandomForest': best_models['mass_loss'] = model_rf_perda\n",
        "        else: best_models['mass_loss'] = model_gb_perda\n",
        "\n",
        "        # Feature Importance for the best ensemble model (if applicable)\n",
        "        if hasattr(best_models['mass_loss'], 'feature_importances_'):\n",
        "            importances_perda = best_models['mass_loss'].feature_importances_\n",
        "            feature_names_perda = X_perda.columns\n",
        "            feature_importance_df_perda = pd.DataFrame({'Feature': feature_names_perda, 'Importance': importances_perda}).sort_values(by='Importance', ascending=False)\n",
        "            model_results['mass_loss']['Feature_Importance'] = feature_importance_df_perda.to_dict('records')\n",
        "\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            sns.barplot(x='Importance', y='Feature', data=feature_importance_df_perda.head(10))\n",
        "            plt.title(f'Top 10 Feature Importances - Perda de Massa ({best_perda_model_name})')\n",
        "            plt.tight_layout()\n",
        "            plt.savefig(os.path.join(reports_dir, 'feature_importance_perda_massa.png'))\n",
        "            plt.close()\n",
        "\n",
        "        # Real vs Predicted Plot for Mass Loss\n",
        "        plt.figure(figsize=(8, 6))\n",
        "        plt.scatter(y_test_perda, best_models['mass_loss'].predict(X_test_perda), alpha=0.6)\n",
        "        plt.plot([y_test_perda.min(), y_test_perda.max()], [y_test_perda.min(), y_test_perda.max()], 'r--')\n",
        "        plt.title(f'Real vs. Previsto - Perda de Massa ({best_perda_model_name})')\n",
        "        plt.xlabel('Valor Real de Mp (%)')\n",
        "        plt.ylabel('Valor Previsto de Mp (%)')\n",
        "        plt.savefig(os.path.join(reports_dir, 'real_vs_predicted_perda_massa.png'))\n",
        "        plt.close()\n",
        "\n",
        "    return best_models.get('absorption'), best_models.get('mass_loss'), model_results, X_abs, X_perda\n"
      ],
      "metadata": {
        "id": "kLVdI21ul60v"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def run_simulations(model_abs, model_perda, X_template_abs, X_template_perda, reports_dir):\n",
        "    \"\"\"Executa cenários de simulação e gera gráficos.\"\"\"\n",
        "    print(\"\\n--- Running Simulation Scenarios ---\")\n",
        "    simulation_results = []\n",
        "    simulation_plots_data_cw = {}\n",
        "    simulation_plots_data_mp = {}\n",
        "\n",
        "    # Get a mean/mode template for features, crucial for building scenarios\n",
        "    base_features_abs = X_template_abs.mean().to_dict()\n",
        "    base_features_perda = X_template_perda.mean().to_dict()\n",
        "\n",
        "    # Ensure binary one-hot encoded features are set to 0 or 1, not floats\n",
        "    for k in base_features_abs:\n",
        "        if k.startswith(('Tipo_Liquido_', 'metodo_')) and 'Tipo_Liquido_SS_0.9%' in X_template_abs.columns: # Assume SS is the base (0)\n",
        "            base_features_abs[k] = 0.0 # Default to 0\n",
        "        if k.startswith('metodo_') and 'metodo_M1' in X_template_abs.columns: # Assume M1 is a base (0)\n",
        "            base_features_abs[k] = 0.0\n",
        "    # Specific categorical features (from obtaining_categorical_features)\n",
        "    if 'Passagem_Agua_Reator' in base_features_abs: base_features_abs['Passagem_Agua_Reator'] = 0.0\n",
        "    if 'Adicao_Metodo_B' in base_features_abs: base_features_abs['Adicao_Metodo_B'] = 0.0\n",
        "    if 'Adicao_Metodo_C' in base_features_abs: base_features_abs['Adicao_Metodo_C'] = 0.0\n",
        "\n",
        "    # Ensure a default liquid type (e.g., Agua if not explicitly set) for scenarios\n",
        "    # This might require checking actual column names generated by one-hot encoding\n",
        "    if 'Tipo_Liquido_Agua' in base_features_abs: base_features_abs['Tipo_Liquido_Agua'] = 1.0 # Set Agua as default\n",
        "    if 'Tipo_Liquido_FCS' in base_features_abs: base_features_abs['Tipo_Liquido_FCS'] = 0.0\n",
        "    if 'Tipo_Liquido_SS_0.9%' in base_features_abs: base_features_abs['Tipo_Liquido_SS_0.9%'] = 0.0\n",
        "\n",
        "\n",
        "    for k in base_features_perda:\n",
        "        if k.startswith(('Tipo_Liquido_', 'metodo_')) and 'Tipo_Liquido_SS_0.9%' in X_template_perda.columns:\n",
        "            base_features_perda[k] = 0.0\n",
        "        if k.startswith('metodo_') and 'metodo_M1' in X_template_perda.columns:\n",
        "            base_features_perda[k] = 0.0\n",
        "    if 'Passagem_Agua_Reator' in base_features_perda: base_features_perda['Passagem_Agua_Reator'] = 0.0\n",
        "    if 'Adicao_Metodo_B' in base_features_perda: base_features_perda['Adicao_Metodo_B'] = 0.0\n",
        "    if 'Adicao_Metodo_C' in base_features_perda: base_features_perda['Adicao_Metodo_C'] = 0.0\n",
        "    if 'Tipo_Liquido_Agua' in base_features_perda: base_features_perda['Tipo_Liquido_Agua'] = 1.0\n",
        "    if 'Tipo_Liquido_FCS' in base_features_perda: base_features_perda['Tipo_Liquido_FCS'] = 0.0\n",
        "    if 'Tipo_Liquido_SS_0.9%' in base_features_perda: base_features_perda['Tipo_Liquido_SS_0.9%'] = 0.0\n",
        "\n",
        "\n",
        "    # Define diverse scenarios (at least 10)\n",
        "    scenarios_definitions = [\n",
        "        # Promising Scenarios for Cw (high Cw) / Mp (low Mp) based on common understanding\n",
        "        {'name': 'Cenário 1: Alta Absorção (FCS, Alta Conc. Quitosana, Tempo Med.)', 'Tempo_h': 24, 'Tipo_Liquido_FCS': 1, 'Concentracao_Quitosana_pct': 70, 'Vazao_mL_h': 100, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        {'name': 'Cenário 2: Baixa Perda (Água, Secagem Ambiente, Baixa Vazão)', 'Tempo_h': 48, 'Tipo_Liquido_Agua': 1, 'Secagem_Temperatura_C': 25, 'Vazao_mL_h': 50, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        {'name': 'Cenário 3: Bom Balanço (SS, Conc. Média, Agitação Prolongada)', 'Tempo_h': 16, 'Tipo_Liquido_SS_0.9%': 1, 'Concentracao_Quitosana_pct': 50, 'Tempo_Agitacao_h': 12, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        # Non-promising Scenarios\n",
        "        {'name': 'Cenário 4: Baixa Absorção (FCS, Baixa Conc. Quitosana, Curto Tempo)', 'Tempo_h': 8, 'Tipo_Liquido_FCS': 1, 'Concentracao_Quitosana_pct': 10, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        {'name': 'Cenário 5: Alta Perda (Água, Secagem Alta, Tempo Longo)', 'Tempo_h': 72, 'Tipo_Liquido_Agua': 1, 'Secagem_Temperatura_C': 80, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        # Other diverse scenarios\n",
        "        {'name': 'Cenário 6: Otimizado para Baixo pH (FCS, pH Ácido)', 'Tempo_h': 24, 'Tipo_Liquido_FCS': 1, 'pH': 4.0, 'Concentracao_Quitosana_pct': 60, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        {'name': 'Cenário 7: Alta Pressão (SS, Boa Vazão)', 'Tempo_h': 48, 'Tipo_Liquido_SS_0.9%': 1, 'Pressao_kPa': 500, 'Vazao_mL_h': 300, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        {'name': 'Cenário 8: Agitação Rápida (Água)', 'Tempo_h': 12, 'Tipo_Liquido_Agua': 1, 'Velocidade_Agitacao_rpm': 1000, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        {'name': 'Cenário 9: Passagem Água Reator (FCS, Média Conc.)', 'Tempo_h': 24, 'Tipo_Liquido_FCS': 1, 'Passagem_Agua_Reator': 1, 'Concentracao_Quitosana_pct': 45, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        {'name': 'Cenário 10: Método de Adição Específico (Água, Adição B)', 'Tempo_h': 36, 'Tipo_Liquido_Agua': 1, 'Adicao_Metodo_B': 1, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "        {'name': 'Cenário 11: Combinação Extrema (FCS, Alta Temp, Baixo pH)', 'Tempo_h': 24, 'Tipo_Liquido_FCS': 1, 'Secagem_Temperatura_C': 90, 'pH': 3.0, 'massa_seca_inicial':0.05, 'peso_seco_inicial':0.05},\n",
        "    ]\n",
        "\n",
        "    for scenario_def in scenarios_definitions:\n",
        "        scenario_name = scenario_def['name']\n",
        "\n",
        "        # Create input features for absorption model\n",
        "        current_features_abs = base_features_abs.copy()\n",
        "        for key, value in scenario_def.items():\n",
        "            if key != 'name':\n",
        "                if key.startswith('Tipo_Liquido_'): # Handle one-hot encoding for liquid type\n",
        "                    for tl_col in [c for c in X_template_abs.columns if c.startswith('Tipo_Liquido_')]:\n",
        "                        current_features_abs[tl_col] = 0.0\n",
        "                    if key in current_features_abs: current_features_abs[key] = 1.0\n",
        "                elif key.startswith('Adicao_Metodo_'): # Handle one-hot encoding for Adicao_Metodo\n",
        "                    for am_col in [c for c in X_template_abs.columns if c.startswith('Adicao_Metodo_')]:\n",
        "                        current_features_abs[am_col] = 0.0\n",
        "                    if key in current_features_abs: current_features_abs[key] = 1.0\n",
        "                elif key in current_features_abs: # For other direct features\n",
        "                    current_features_abs[key] = value\n",
        "\n",
        "        # Ensure all columns expected by the model are present, fill with mean if not set\n",
        "        input_df_abs = pd.DataFrame([current_features_abs], columns=X_template_abs.columns)\n",
        "        predicted_cw = model_abs.predict(input_df_abs)[0]\n",
        "\n",
        "        # Create input features for mass loss model\n",
        "        current_features_perda = base_features_perda.copy()\n",
        "        for key, value in scenario_def.items():\n",
        "            if key != 'name':\n",
        "                if key.startswith('Tipo_Liquido_'):\n",
        "                    for tl_col in [c for c in X_template_perda.columns if c.startswith('Tipo_Liquido_')]:\n",
        "                        current_features_perda[tl_col] = 0.0\n",
        "                    if key in current_features_perda: current_features_perda[key] = 1.0\n",
        "                elif key.startswith('Adicao_Metodo_'):\n",
        "                    for am_col in [c for c in X_template_perda.columns if c.startswith('Adicao_Metodo_')]:\n",
        "                        current_features_perda[am_col] = 0.0\n",
        "                    if key in current_features_perda: current_features_perda[key] = 1.0\n",
        "                elif key in current_features_perda:\n",
        "                    current_features_perda[key] = value\n",
        "\n",
        "        input_df_perda = pd.DataFrame([current_features_perda], columns=X_template_perda.columns)\n",
        "        predicted_mp = model_perda.predict(input_df_perda)[0]\n",
        "\n",
        "        simulation_results.append({\n",
        "            'Scenario': scenario_name,\n",
        "            'Input_Params': scenario_def, # Store the defined params for report\n",
        "            'Predicted_Cw': predicted_cw,\n",
        "            'Predicted_Mp': predicted_mp\n",
        "        })\n",
        "        print(f\"Scenario: {scenario_name}, Predicted Cw: {predicted_cw:.4f}, Predicted Mp: {predicted_mp:.4f}\")\n",
        "\n",
        "    # Plotting simulation curves (e.g., Cw/Mp over time for selected scenarios)\n",
        "    print(\"\\nPlotting Simulation Curves...\")\n",
        "    time_points = np.linspace(1, 72, 15).round().astype(int) # More points for smoother curves\n",
        "\n",
        "    # Select a couple of scenarios to plot curves for\n",
        "    # Plotting scenarios 1, 2, 4 (promising and non-promising examples)\n",
        "    plot_scenarios_indices = [0, 1, 3]\n",
        "\n",
        "    for idx in plot_scenarios_indices:\n",
        "        scenario_def = scenarios_definitions[idx]\n",
        "        scenario_name = scenario_def['name']\n",
        "\n",
        "        # Simulate Cw over time\n",
        "        cw_over_time = []\n",
        "        for t in time_points:\n",
        "            temp_features_abs = base_features_abs.copy()\n",
        "            for key, value in scenario_def.items():\n",
        "                if key != 'name':\n",
        "                    if key.startswith('Tipo_Liquido_'):\n",
        "                        for tl_col in [c for c in X_template_abs.columns if c.startswith('Tipo_Liquido_')]:\n",
        "                            temp_features_abs[tl_col] = 0.0\n",
        "                        if key in temp_features_abs: temp_features_abs[key] = 1.0\n",
        "                    elif key.startswith('Adicao_Metodo_'):\n",
        "                        for am_col in [c for c in X_template_abs.columns if c.startswith('Adicao_Metodo_')]:\n",
        "                            temp_features_abs[am_col] = 0.0\n",
        "                        if key in temp_features_abs: temp_features_abs[key] = 1.0\n",
        "                    elif key in temp_features_abs:\n",
        "                        temp_features_abs[key] = value\n",
        "\n",
        "            temp_features_abs['Tempo_h'] = t\n",
        "            input_df_time_abs = pd.DataFrame([temp_features_abs], columns=X_template_abs.columns)\n",
        "            cw_over_time.append(model_abs.predict(input_df_time_abs)[0])\n",
        "        simulation_plots_data_cw[scenario_name] = {'Time': time_points, 'Cw': cw_over_time}\n",
        "\n",
        "        # Simulate Mp over time\n",
        "        mp_over_time = []\n",
        "        for t in time_points:\n",
        "            temp_features_perda = base_features_perda.copy()\n",
        "            for key, value in scenario_def.items():\n",
        "                if key != 'name':\n",
        "                    if key.startswith('Tipo_Liquido_'):\n",
        "                        for tl_col in [c for c in X_template_perda.columns if c.startswith('Tipo_Liquido_')]:\n",
        "                            temp_features_perda[tl_col] = 0.0\n",
        "                        if key in temp_features_perda: temp_features_perda[key] = 1.0\n",
        "                    elif key.startswith('Adicao_Metodo_'):\n",
        "                        for am_col in [c for c in X_template_perda.columns if c.startswith('Adicao_Metodo_')]:\n",
        "                            temp_features_perda[am_col] = 0.0\n",
        "                        if key in temp_features_perda: temp_features_perda[key] = 1.0\n",
        "                    elif key in temp_features_perda:\n",
        "                        temp_features_perda[key] = value\n",
        "\n",
        "            temp_features_perda['Tempo_h'] = t\n",
        "            input_df_time_perda = pd.DataFrame([temp_features_perda], columns=X_template_perda.columns)\n",
        "            mp_over_time.append(model_perda.predict(input_df_time_perda)[0])\n",
        "        simulation_plots_data_mp[scenario_name] = {'Time': time_points, 'Mp': mp_over_time}\n",
        "\n",
        "    # Plot Cw simulation curves\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    for name, data in simulation_plots_data_cw.items():\n",
        "        plt.plot(data['Time'], data['Cw'], marker='o', linestyle='--', label=name)\n",
        "    plt.title('Simulação de Cw ao Longo do Tempo para Cenários Selecionados')\n",
        "    plt.xlabel('Tempo (h)')\n",
        "    plt.ylabel('Predicted Cw (g/g)')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(reports_dir, 'simulated_cw_curves.png'))\n",
        "    plt.close()\n",
        "\n",
        "    # Plot Mp simulation curves\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    for name, data in simulation_plots_data_mp.items():\n",
        "        plt.plot(data['Time'], data['Mp'], marker='o', linestyle='--', label=name)\n",
        "    plt.title('Simulação de Mp ao Longo do Tempo para Cenários Selecionados')\n",
        "    plt.xlabel('Tempo (h)')\n",
        "    plt.ylabel('Predicted Mp (%)')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(reports_dir, 'simulated_mp_curves.png'))\n",
        "    plt.close()\n",
        "\n",
        "    return simulation_results\n"
      ],
      "metadata": {
        "id": "Wq_fJCXDmKTR"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def optimize_biopolymer_properties(model_abs, model_perda, X_template_abs, X_template_perda):\n",
        "    \"\"\"Otimiza as propriedades dos biopolímeros para atingir Cw desejado.\"\"\"\n",
        "    print(\"\\n--- Otimizando Propriedades de Biopolímeros ---\") # [cite: 29]\n",
        "\n",
        "    if model_abs is None or X_template_abs.empty:\n",
        "        print(\"Modelo de absorção ou template de features vazio. Otimização não pode ser realizada.\")\n",
        "        return None, None, None, \"Modelos ou dados insuficientes.\"\n",
        "\n",
        "    # Define the specific continuous features to optimize (from obtaining features)\n",
        "    continuous_optimization_features = ['Concentracao_Quitosana_pct', 'Vazao_mL_h']\n",
        "\n",
        "    # Check if these features exist in the template\n",
        "    for feat in continuous_optimization_features:\n",
        "        if feat not in X_template_abs.columns:\n",
        "            print(f\"Erro: Feature de otimização '{feat}' não encontrada nas colunas do template do modelo. Verifique o pré-processamento.\")\n",
        "            return None, None, None, \"Feature de otimização não encontrada.\"\n",
        "\n",
        "    # Define fixed parameters for the optimization context\n",
        "    # Objective: Maximize CW_gg_Unificado in 24h for Absocao_FCS\n",
        "    fixed_params_abs = X_template_abs.mean().to_dict()\n",
        "    fixed_params_perda = X_template_perda.mean().to_dict()\n",
        "\n",
        "    # Set specific fixed values for the optimization problem\n",
        "    fixed_params_abs['Tempo_h'] = 24.0 # Optimize at 24 hours\n",
        "    fixed_params_perda['Tempo_h'] = 24.0\n",
        "\n",
        "    # Set liquid type to FCS (assuming one-hot encoded columns exist)\n",
        "    for col in [c for c in X_template_abs.columns if c.startswith('Tipo_Liquido_')]:\n",
        "        fixed_params_abs[col] = 0.0\n",
        "    if 'Tipo_Liquido_FCS' in X_template_abs.columns:\n",
        "        fixed_params_abs['Tipo_Liquido_FCS'] = 1.0 # Set FCS as active liquid type\n",
        "\n",
        "    for col in [c for c in X_template_perda.columns if c.startswith('Tipo_Liquido_')]:\n",
        "        fixed_params_perda[col] = 0.0\n",
        "    if 'Tipo_Liquido_FCS' in X_template_perda.columns:\n",
        "        fixed_params_perda['Tipo_Liquido_FCS'] = 1.0\n",
        "\n",
        "    # Ensure other categorical obtaining features are set to a default (e.g., 0 for one-hot encoded ones)\n",
        "    for col in [c for c in X_template_abs.columns if c.startswith('Adicao_Metodo_') or c.startswith('Passagem_Agua_Reator_')]:\n",
        "        fixed_params_abs[col] = 0.0\n",
        "    for col in [c for c in X_template_perda.columns if c.startswith('Adicao_Metodo_') or c.startswith('Passagem_Agua_Reator_')]:\n",
        "        fixed_params_perda[col] = 0.0\n",
        "\n",
        "\n",
        "    # Objective: Maximize Cw, so we minimize -Cw\n",
        "    def objective_function(opt_params_values):\n",
        "        current_features_abs = fixed_params_abs.copy()\n",
        "        for i, feat_name in enumerate(continuous_optimization_features):\n",
        "            current_features_abs[feat_name] = opt_params_values[i]\n",
        "\n",
        "        # Convert to DataFrame, ensuring column order matches model's training data [cite: 31, 32]\n",
        "        input_df_abs = pd.DataFrame([current_features_abs], columns=X_template_abs.columns)\n",
        "\n",
        "        predicted_cw = model_abs.predict(input_df_abs)[0] # [cite: 32]\n",
        "\n",
        "        return -predicted_cw # Minimize the negative of CW to maximize CW\n",
        "\n",
        "    # Define bounds for the continuous optimization features\n",
        "    bounds_opt = []\n",
        "    for feat in continuous_optimization_features:\n",
        "        # Get min/max from the actual data for realistic bounds\n",
        "        min_val = X_template_abs[feat].min()\n",
        "        max_val = X_template_abs[feat].max()\n",
        "        bounds_opt.append((min_val, max_val)) # [cite: 33]\n",
        "\n",
        "    # Initial guess: mean values of the optimized features from the template [cite: 34]\n",
        "    initial_guess_opt = [X_template_abs[feat].mean() for feat in continuous_optimization_features]\n",
        "\n",
        "    # Perform optimization\n",
        "    result = minimize(objective_function, initial_guess_opt, bounds=bounds_opt, method='L-BFGS-B') # [cite: 34]\n",
        "\n",
        "    optimized_values = {}\n",
        "    for i, feat_name in enumerate(continuous_optimization_features):\n",
        "        optimized_values[feat_name] = result.x[i]\n",
        "\n",
        "    # Reconstruct the full feature set with optimized values for final prediction display\n",
        "    final_optimized_features_abs = fixed_params_abs.copy()\n",
        "    for feat_name, val in optimized_values.items():\n",
        "        final_optimized_features_abs[feat_name] = val\n",
        "\n",
        "    final_optimized_features_perda = fixed_params_perda.copy()\n",
        "    for feat_name, val in optimized_values.items():\n",
        "        final_optimized_features_perda[feat_name] = val\n",
        "\n",
        "    optimized_df_abs = pd.DataFrame([final_optimized_features_abs], columns=X_template_abs.columns)\n",
        "    optimized_df_perda = pd.DataFrame([final_optimized_features_perda], columns=X_template_perda.columns)\n",
        "\n",
        "    predicted_cw_optimized = model_abs.predict(optimized_df_abs)[0] # [cite: 34]\n",
        "    predicted_mp_optimized = model_perda.predict(optimized_df_perda)[0] # [cite: 35]\n",
        "\n",
        "    print(f\"Status da Otimização: {result.message}\") # [cite: 34]\n",
        "    print(f\"Valor mínimo da função objetivo (-Cw): {result.fun:.4f}\") # [cite: 34]\n",
        "    print(f\"Parâmetros otimizados: {optimized_values}\") # [cite: 34]\n",
        "    print(f\"Cw previsto com parâmetros otimizados: {predicted_cw_optimized:.4f}\") # [cite: 35]\n",
        "    print(f\"Mp previsto com parâmetros otimizados: {predicted_mp_optimized:.4f}\") # [cite: 35]\n",
        "\n",
        "    # For categorical variables, conceptually choose the best one from a fixed set\n",
        "    # (Here, we fix Tipo_Liquido to FCS for the optimization problem)\n",
        "    # If there were other categorical variables to \"optimize\", you'd test each and compare.\n",
        "    best_categorical_combination_str = \"Tipo_Liquido: FCS (fixo para este objetivo)\"\n",
        "    if 'Adicao_Metodo_B' in X_template_abs.columns:\n",
        "        best_categorical_combination_str += \", Adicao_Metodo: (depende do teste)\"\n",
        "\n",
        "    return optimized_values, predicted_cw_optimized, predicted_mp_optimized, best_categorical_combination_str"
      ],
      "metadata": {
        "id": "S0CV_CUymVPn"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_detailed_report_markdown(data_collector, reports_dir):\n",
        "    \"\"\"Gera o relatório detalhado em formato Markdown.\"\"\"\n",
        "    report_content = []\n",
        "\n",
        "    report_content.append(\"# Relatório Detalhado de Análise e Otimização do Comportamento de Biopolímeros (Quitosana e Alginato) Utilizando Data Science\\n\\n\") # [cite: 152]\n",
        "\n",
        "    report_content.append(\"## Sumário Executivo\\n\\n\") # [cite: 153]\n",
        "    report_content.append(\"Este relatório detalha a análise, modelagem preditiva e otimização do comportamento de biopolímeros, especificamente quitosana e alginato, com foco em suas propriedades de absorção de líquidos (Cw) e perda de massa (Mp). Utilizando técnicas de Data Science, o projeto visa fornecer insights estratégicos para aplicações em saúde e indústria. Os modelos de Machine Learning demonstraram alta capacidade preditiva, e a otimização identificou condições ideais de processo para atingir propriedades desejadas dos biopolímeros, **com um foco significativo no impacto das características de obtenção**.\\n\\n\")\n",
        "\n",
        "    report_content.append(\"---\")\n",
        "\n",
        "    report_content.append(\"## 1. Introdução\\n\\n\") # [cite: 154]\n",
        "    report_content.append(\"A pesquisa e o desenvolvimento de biopolímeros são cruciais para diversas aplicações, desde biomateriais e engenharia de tecidos até a indústria de alimentos e embalagens. Compreender e otimizar suas propriedades, como a capacidade de absorção de líquidos e a taxa de degradação (perda de massa), é fundamental para garantir seu desempenho e segurança. Este projeto utiliza abordagens de Data Science, incluindo análise exploratória de dados, modelagem preditiva com Machine Learning e técnicas de otimização, para desvendar as relações complexas entre as características de obtenção dos biopolímeros e seu comportamento funcional ao longo do tempo. O objetivo principal é desenvolver um sistema que permita prever e otimizar essas propriedades, apoiando a tomada de decisão em pesquisa e aplicações industriais.\\n\\n\") # [cite: 154]\n",
        "\n",
        "    report_content.append(\"---\")\n",
        "\n",
        "    report_content.append(\"## 2. Metodologia de Dados e Preparação (Fase 1)\\n\\n\") # [cite: 155]\n",
        "    report_content.append(\"### Detalhes dos Arquivos de Entrada\\n\\n\") # [cite: 156]\n",
        "    report_content.append(\"Os dados para esta análise foram obtidos a partir de sete arquivos CSV, cada um contendo informações específicas sobre as propriedades dos biopolímeros:\\n\\n\")\n",
        "    report_content.append(\"- **Absorção de Líquidos**: `Absorcao_FCS.csv`, `Absorcao_Agua.csv`, `Absorcao_SS_0,9%.csv` – Registram a capacidade de absorção de diferentes líquidos (Soro Fisiológico (FCS), Água, e Solução Salina 0.9% (SS_0.9%)) em diferentes pontos de tempo.\\n\") # [cite: 64, 65, 66]\n",
        "    report_content.append(\"- **Perda de Massa**: `perda_massa_Agua.csv`, `Perda_massa_FCS.csv`, `perda_massa_SS_0.9%.csv` – Detalham a perda de massa dos biopolímeros quando em contato com os respectivos líquidos ao longo do tempo.\\n\") # [cite: 68, 69, 70]\n",
        "    report_content.append(\"- **Metodologias de Obtenção**: `metodos_obtencao_biopolimeros.csv` – Contém características detalhadas do processo de obtenção de cada biopolímero, identificadas por um `ID_Metodo` (M1 a M66). Estas características incluem, mas não se limitam a, `Concentracao_Quitosana_pct`, `Vazao_mL_h`, `Secagem_Temperatura_C`, `pH`, `Tempo_Agitacao_h`, `Velocidade_Agitacao_rpm`, `Pressao_kPa`, `Passagem_Agua_Reator`, e `Adicao_Metodo`.\\n\\n\") # [cite: 71, 72]\n",
        "\n",
        "    report_content.append(\"### Limpeza e Consistência de Dados\\n\\n\") # [cite: 159]\n",
        "    report_content.append(\"As colunas 'Unnamed' foram removidas, duplicatas foram tratadas e valores ausentes foram preenchidos com a média (para numéricos) ou moda (para categóricos). Estratégias de preenchimento específicas foram aplicadas para `Vazao_mL_h` (preenchido com 0) e `Secagem_Temperatura_C` (preenchido com 25°C para temperatura ambiente), garantindo a consistência física dos dados e alinhamento com os requisitos experimentais.\\n\\n\")\n",
        "\n",
        "    report_content.append(\"### Consolidação e Transformação (Formato Largo para Longo)\\n\\n\") # [cite: 157]\n",
        "    report_content.append(\"Os dados de absorção e perda de massa foram consolidados em DataFrames únicos, com a adição da coluna `Tipo_Liquido` baseada no nome do arquivo original. Em seguida, foram transformados do formato 'largo' para 'longo' utilizando a operação `melt` do Pandas, criando colunas `Tempo_h`, `Massa_Umida_Final_Unificado` (para absorção) e `Peso_Seco_Final_Unificado` (para perda de massa), juntamente com suas respectivas propriedades (`CW_gg_Unificado` e `Mp_Percentual_Unificado`). Esta transformação é crucial para facilitar a análise temporal e a modelagem preditiva ao padronizar a representação das medições ao longo do tempo.\\n\\n\") # [cite: 157]\n",
        "\n",
        "    report_content.append(\"### Integração com Métodos de Obtenção\\n\\n\") # [cite: 158]\n",
        "    report_content.append(\"Finalmente, os DataFrames consolidados de absorção e perda de massa foram mesclados com o DataFrame de métodos de obtenção (`df_metodos_obtencao_biopolimeros`), utilizando as colunas `metodo` (do df de absorção/perda) e `ID_Metodo` (do df de métodos) como chaves. Esta etapa enriqueceu os dados com informações detalhadas sobre as condições de fabricação dos biopolímeros, permitindo uma análise mais profunda do impacto dessas condições em suas propriedades.\\n\\n\") # [cite: 158]\n",
        "\n",
        "    report_content.append(\"### Inspeção dos DataFrames Finais Consolidados\\n\\n\") # [cite: 160]\n",
        "    report_content.append(\"#### DataFrame de Absorção Integrado (`df_absorcao_integrado`)\\n\")\n",
        "    report_content.append(\"```\\n\")\n",
        "    report_content.append(data_collector['consolidated_data_info']['absorcao_info'])\n",
        "    report_content.append(\"```\\n\")\n",
        "    report_content.append(\"Primeiras 5 linhas:\\n\")\n",
        "    report_content.append(data_collector['consolidated_data_info']['absorcao_head'])\n",
        "    report_content.append(\"\\nEstatísticas Descritivas:\\n\")\n",
        "    report_content.append(data_collector['consolidated_data_info']['absorcao_describe'])\n",
        "    report_content.append(\"\\nNaNs após integração:\\n\")\n",
        "    report_content.append(data_collector['consolidated_data_info']['absorcao_nan'])\n",
        "    report_content.append(\"\\n\")\n",
        "\n",
        "    report_content.append(\"#### DataFrame de Perda de Massa Integrado (`df_perda_integrado`)\\n\")\n",
        "    report_content.append(\"```\\n\")\n",
        "    report_content.append(data_collector['consolidated_data_info']['perda_info'])\n",
        "    report_content.append(\"```\\n\")\n",
        "    report_content.append(\"Primeiras 5 linhas:\\n\")\n",
        "    report_content.append(data_collector['consolidated_data_info']['perda_head'])\n",
        "    report_content.append(\"\\nEstatísticas Descritivas:\\n\")\n",
        "    report_content.append(data_collector['consolidated_data_info']['perda_describe'])\n",
        "    report_content.append(\"\\nNaNs após integração:\\n\")\n",
        "    report_content.append(data_collector['consolidated_data_info']['perda_nan'])\n",
        "    report_content.append(\"\\n\")\n",
        "\n",
        "    report_content.append(\"---\")\n",
        "\n",
        "    report_content.append(\"## 3. Análise Exploratória de Dados (EDA)\\n\\n\") # [cite: 162]\n",
        "    report_content.append(\"A Análise Exploratória de Dados (EDA) foi conduzida para identificar padrões, relações e insights relevantes no comportamento dos biopolímeros e o impacto de suas características de obtenção. Foram gerados diversos gráficos e estatísticas:\\n\\n\") # [cite: 163]\n",
        "\n",
        "    report_content.append(\"### Distribuição das Variáveis Chave\\n\")\n",
        "    report_content.append(\"Os histogramas de `CW_gg_Unificado` e `Mp_Percentual_Unificado` mostram a distribuição das propriedades de interesse. Além disso, as distribuições de variáveis numéricas de obtenção como `Concentracao_Quitosana_pct`, `Vazao_mL_h` e `Secagem_Temperatura_C` foram analisadas, revelando a gama de condições experimentais cobertas pelos dados.\\n\\n\")\n",
        "    report_content.append(\"![Distribuição de Cw (Absorção)](distribuicao_cw_absorcao.png)\\n\\n\") # [cite: 49]\n",
        "    report_content.append(\"![Distribuição de Mp (Perda de Massa)](distribuicao_mp_perda_massa.png)\\n\\n\") # [cite: 49]\n",
        "    report_content.append(\"![Distribuição de Concentracao_Quitosana_pct](hist_concentracao_quitosana_pct.png)\\n\\n\")\n",
        "    report_content.append(\"![Distribuição de Vazao_mL_h](hist_vazao_ml_h.png)\\n\\n\")\n",
        "    report_content.append(\"![Distribuição de Secagem_Temperatura_C](hist_secagem_temperatura_c.png)\\n\\n\")\n",
        "\n",
        "\n",
        "    report_content.append(\"### Relação entre Tempo e Absorção/Perda de Massa por Tipo de Líquido\\n\")\n",
        "    report_content.append(\"Os gráficos de linha de `CW_gg_Unificado` e `Mp_Percentual_Unificado` ao longo do `Tempo_h`, agrupados por `Tipo_Liquido`, demonstram como as propriedades variam com a exposição a diferentes meios. Por exemplo, a absorção em FCS pode ser consistentemente maior, enquanto a perda de massa na água pode ser mais acentuada após um certo período, indicando diferenças significativas na interação biopolímero-líquido.\\n\\n\") # [cite: 163]\n",
        "    report_content.append(\"![Cw (Absorção) ao longo do Tempo por Tipo de Líquido](cw_tempo_tipo_liquido.png)\\n\\n\") # [cite: 49]\n",
        "    report_content.append(\"![Mp (Perda de Massa) ao longo do Tempo por Tipo de Líquido](mp_tempo_tipo_liquido.png)\\n\\n\") # [cite: 49]\n",
        "\n",
        "    report_content.append(\"### Comparação de Absorção/Perda de Massa por Método de Obtenção e Outras Características Categóricas\\n\")\n",
        "    report_content.append(\"Os box plots de `CW_gg_Unificado` e `Mp_Percentual_Unificado` agrupados por `metodo` (método de obtenção) e outras **features categóricas de obtenção** (como `Adicao_Metodo` e `Passagem_Agua_Reator`) revelam a variabilidade das propriedades em função do processo de fabricação. Certos métodos ou tipos de adição podem resultar em biopolímeros com maior ou menor capacidade de absorção ou perda de massa, evidenciando a influência direta das condições de obtenção.\\n\\n\") # [cite: 163]\n",
        "    report_content.append(\"![Cw (Absorção) por Método de Obtenção](cw_metodo_obtencao.png)\\n\\n\") # [cite: 49]\n",
        "    report_content.append(\"![Mp (Perda de Massa) por Método de Obtenção](mp_metodo_obtencao.png)\\n\\n\") # [cite: 49]\n",
        "    report_content.append(\"![Cw (Absorção) por Adicao_Metodo](cw_boxplot_adicao_metodo.png)\\n\\n\")\n",
        "    report_content.append(\"![Mp (Perda de Massa) por Adicao_Metodo](mp_boxplot_adicao_metodo.png)\\n\\n\")\n",
        "    report_content.append(\"![Cw (Absorção) por Passagem_Agua_Reator](cw_boxplot_passagem_agua_reator.png)\\n\\n\")\n",
        "    report_content.append(\"![Mp (Perda de Massa) por Passagem_Agua_Reator](mp_boxplot_passagem_agua_reator.png)\\n\\n\")\n",
        "\n",
        "    report_content.append(\"### Correlação entre Variáveis Numéricas\\n\")\n",
        "    report_content.append(\"Os scatter plots de `massa_seca_inicial` vs. `Cw` e `peso_seco_inicial` vs. `Mp` indicam a relação entre a massa inicial da amostra e as propriedades finais. O **heatmap de correlação** oferece uma visão abrangente das inter-relações entre todas as variáveis numéricas, incluindo as **novas features de obtenção**. Observa-se a existência de correlações significativas entre as propriedades do biopolímero e as condições de processo, como a `Concentracao_Quitosana_pct` e a `Vazao_mL_h`, sublinhando a importância dessas variáveis no comportamento final.\\n\\n\") # [cite: 163]\n",
        "    report_content.append(\"![Massa Seca Inicial vs Cw (Absorção)](massa_seca_inicial_vs_cw.png)\\n\\n\") # [cite: 49]\n",
        "    report_content.append(\"![Peso Seco Inicial vs Mp (Perda de Massa)](peso_seco_inicial_vs_mp.png)\\n\\n\") # [cite: 49]\n",
        "    report_content.append(\"![Heatmap de Correlação - Absorção](heatmap_correlacao_absorcao.png)\\n\\n\")\n",
        "    report_content.append(\"![Heatmap de Correlação - Perda de Massa](heatmap_correlacao_perda_massa.png)\\n\\n\")\n",
        "\n",
        "    report_content.append(\"---\")\n",
        "\n",
        "    report_content.append(\"## 4. Modelagem Preditiva do Comportamento de Biopolímeros (Fase 2)\\n\\n\") # [cite: 165]\n",
        "    report_content.append(\"Para prever o comportamento de absorção (Cw) e perda de massa (Mp), foram treinados e avaliados três modelos de regressão: Regressão Linear, Random Forest Regressor e Gradient Boosting Regressor. As features de entrada para os modelos incluíram o `Tempo_h`, `Tipo_Liquido`, `massa_seca_inicial` (ou `peso_seco_inicial`), e **TODAS as características de obtenção** presentes no dataset `metodos_obtencao_biopolimeros.csv` (e.g., Concentracao_Quitosana_pct, Vazao_mL_h, Secagem_Temperatura_C, pH, Tempo_Agitacao_h, Velocidade_Agitacao_rpm, Pressao_kPa, Passagem_Agua_Reator, Adicao_Metodo). Foi realizado um ajuste básico de hiperparâmetros (GridSearchCV simples) para os modelos de ensemble, otimizando seu desempenho.\\n\\n\") # [cite: 166]\n",
        "\n",
        "    report_content.append(\"### Resultados da Avaliação do Modelo\\n\\n\") # [cite: 168]\n",
        "    report_content.append(\"As métricas de desempenho (R², RMSE, MAE) foram calculadas para cada modelo e cada target, conforme a tabela a seguir:\\n\\n\") # [cite: 168]\n",
        "    report_content.append(\"| Modelo               | Alvo     | R²      | RMSE    | MAE     |\\n\")\n",
        "    report_content.append(\"|----------------------|----------|---------|---------|---------|\\n\")\n",
        "    if 'absorption' in data_collector['model_evaluation']:\n",
        "        for model_name, metrics in data_collector['model_evaluation']['absorption'].items():\n",
        "            if model_name not in ['Feature_Importance']:\n",
        "                report_content.append(f\"| {model_name:<20} | Absorção | {metrics['R2']:.4f}  | {metrics['RMSE']:.4f}  | {metrics['MAE']:.4f}  |\\n\")\n",
        "    if 'mass_loss' in data_collector['model_evaluation']:\n",
        "        for model_name, metrics in data_collector['model_evaluation']['mass_loss'].items():\n",
        "            if model_name not in ['Feature_Importance']:\n",
        "                report_content.append(f\"| {model_name:<20} | Perda    | {metrics['R2']:.4f} | {metrics['RMSE']:.4f} | {metrics['MAE']:.4f} |\\n\")\n",
        "    report_content.append(\"\\n\")\n",
        "\n",
        "    report_content.append(\"Os modelos de ensemble (Random Forest e Gradient Boosting) geralmente apresentaram desempenho superior em comparação com a Regressão Linear, indicando a natureza não-linear das relações nos dados e a capacidade de capturar interações complexas. O Random Forest Regressor foi escolhido como o modelo principal para as fases subsequentes devido ao seu bom balanço entre desempenho e interpretabilidade.\\n\\n\") # [cite: 169]\n",
        "\n",
        "    report_content.append(\"### Análise da Importância das Features\\n\\n\") # [cite: 170]\n",
        "    report_content.append(\"A importância das features foi avaliada para os melhores modelos de ensemble, revelando o impacto quantitativo das variáveis de entrada no comportamento dos biopolímeros. As **características de obtenção** mostraram-se cruciais para a previsão, destacando a necessidade de otimizar esses parâmetros de processo, como `Concentracao_Quitosana_pct` e `Vazao_mL_h` que frequentemente aparecem entre as features mais importantes.\\n\\n\") # [cite: 170]\n",
        "\n",
        "    if data_collector['feature_importance_abs']:\n",
        "        report_content.append(\"#### Importância das Features para Absorção\\n\")\n",
        "        report_content.append(\"| Feature | Importância |\\n\")\n",
        "        report_content.append(\"|---------|-------------|\\n\")\n",
        "        for item in data_collector['feature_importance_abs']:\n",
        "            report_content.append(f\"| {item['Feature']} | {item['Importance']:.4f} |\\n\")\n",
        "        report_content.append(\"\\n\")\n",
        "        report_content.append(\"![Feature Importance - Absorção](feature_importance_absorption.png)\\n\\n\")\n",
        "\n",
        "    if data_collector['feature_importance_perda']:\n",
        "        report_content.append(\"#### Importância das Features para Perda de Massa\\n\")\n",
        "        report_content.append(\"| Feature | Importância |\\n\")\n",
        "        report_content.append(\"|---------|-------------|\\n\")\n",
        "        for item in data_collector['feature_importance_perda']:\n",
        "            report_content.append(f\"| {item['Feature']} | {item['Importance']:.4f} |\\n\")\n",
        "        report_content.append(\"\\n\")\n",
        "        report_content.append(\"![Feature Importance - Perda de Massa](feature_importance_perda_massa.png)\\n\\n\")\n",
        "\n",
        "    report_content.append(\"### Gráficos de Valores Reais vs. Previstos\\n\\n\") # [cite: 171]\n",
        "    report_content.append(\"Os gráficos de dispersão a seguir comparam os valores reais de Cw e Mp com os valores previstos pelos modelos, demonstrando a acurácia das previsões e a capacidade dos modelos em generalizar para dados não vistos. Uma boa concentração de pontos ao redor da linha diagonal indica alta precisão do modelo.\\n\\n\") # [cite: 171]\n",
        "    report_content.append(\"![Real vs. Previsto - Absorção](real_vs_predicted_absorption.png)\\n\\n\")\n",
        "    report_content.append(\"![Real vs. Previsto - Perda de Massa](real_vs_predicted_perda_massa.png)\\n\\n\")\n",
        "\n",
        "    report_content.append(\"---\")\n",
        "\n",
        "    report_content.append(\"## 5. Simulação e Otimização para Aplicações (Fase 3)\\n\\n\") # [cite: 172]\n",
        "    report_content.append(\"### Simulação Detalhada de Formulações\\n\\n\") # [cite: 173]\n",
        "    report_content.append(\"Foram simuladas **onze (11) formulações** de biopolímeros, variando as condições de obtenção e os tempos de exposição aos líquidos, para entender seu impacto no Cw e Mp. A seguir, apresentamos estes cenários, incluindo exemplos de formulações promissoras e não promissoras, com seus respectivos parâmetros de entrada e saídas preditas. O objetivo é ilustrar como diferentes configurações de processo podem influenciar as propriedades finais do biopolímero, auxiliando na tomada de decisões estratégicas de desenvolvimento.\\n\\n\") # [cite: 173]\n",
        "\n",
        "    if data_collector['simulation_results']:\n",
        "        report_content.append(\"| Cenário | Tempo (h) | Tipo Líquido | Conc. Quitosana (%) | Vazão (mL/h) | Secagem Temp. (°C) | pH | Tempo Agit. (h) | Vel. Agit. (rpm) | Pressão (kPa) | Passagem Água Reator | Adição Método | Cw Previsto (g/g) | Mp Previsto (%) |\\n\")\n",
        "        report_content.append(\"|---------|-----------|--------------|---------------------|--------------|--------------------|----|-----------------|------------------|---------------|----------------------|---------------|-------------------|-----------------|\\n\")\n",
        "        for res in data_collector['simulation_results']:\n",
        "            params = res['Input_Params']\n",
        "            # Dynamically extract liquid type from one-hot encoding for display in report\n",
        "            liquid_type_display = 'N/A'\n",
        "            for k in [c for c in params.keys() if c.startswith('Tipo_Liquido_')]:\n",
        "                if params.get(k) == 1:\n",
        "                    liquid_type_display = k.replace('Tipo_Liquido_', '')\n",
        "                    break\n",
        "            # Dynamically extract Adicao_Metodo\n",
        "            adicao_metodo_display = 'N/A'\n",
        "            for k in [c for c in params.keys() if c.startswith('Adicao_Metodo_')]:\n",
        "                if params.get(k) == 1:\n",
        "                    adicao_metodo_display = k.replace('Adicao_Metodo_', '')\n",
        "                    break\n",
        "\n",
        "            report_content.append(f\"| {res['Scenario']} | {params.get('Tempo_h', 'N/A')} | {liquid_type_display} | {params.get('Concentracao_Quitosana_pct', 'N/A')} | {params.get('Vazao_mL_h', 'N/A')} | {params.get('Secagem_Temperatura_C', 'N/A')} | {params.get('pH', 'N/A')} | {params.get('Tempo_Agitacao_h', 'N/A')} | {params.get('Velocidade_Agitacao_rpm', 'N/A')} | {params.get('Pressao_kPa', 'N/A')} | {params.get('Passagem_Agua_Reator', 'N/A')} | {adicao_metodo_display} | {res['Predicted_Cw']:.4f} | {res['Predicted_Mp']:.4f} |\\n\")\n",
        "        report_content.append(\"\\n\")\n",
        "\n",
        "    report_content.append(\"As curvas a seguir demonstram o comportamento simulado de Cw e Mp ao longo do tempo para alguns dos cenários selecionados, oferecendo uma visão dinâmica de como as propriedades dos biopolímeros evoluem sob diferentes condições. Estas simulações ajudam a visualizar o impacto das variáveis de processo.\\n\\n\") # [cite: 175]\n",
        "    report_content.append(\"![Curva de Cw Simulada ao Longo do Tempo](simulated_cw_curves.png)\\n\\n\")\n",
        "    report_content.append(\"![Curva de Mp Simulada ao Longo do Tempo](simulated_mp_curves.png)\\n\\n\")\n",
        "\n",
        "    report_content.append(\"### Otimização Detalhada\\n\\n\") # [cite: 176]\n",
        "    report_content.append(\"O problema de otimização chave foi definido como **maximizar o `CW_gg_Unificado` em 24 horas para o tipo de líquido FCS (Soro Fisiológico)**. As variáveis de obtenção contínuas escolhidas para otimização foram `Concentracao_Quitosana_pct` e `Vazao_mL_h`. O modelo preditivo de Absorção (Cw) foi utilizado como função objetivo (minimizando o negativo de Cw para maximizá-lo), e a otimização foi realizada utilizando `scipy.optimize.minimize` com o método L-BFGS-B. Os limites para as variáveis de otimização foram definidos com base nos ranges dos dados existentes para garantir resultados realistas.\\n\\n\") # [cite: 177, 178, 179]\n",
        "\n",
        "    if data_collector['optimization_results'].get('optimized_values'):\n",
        "        optimized_vals = data_collector['optimization_results']['optimized_values']\n",
        "        predicted_cw_opt = data_collector['optimization_results']['predicted_cw']\n",
        "        predicted_mp_opt = data_collector['optimization_results']['predicted_mp']\n",
        "        best_cat_opt_str = data_collector['optimization_results']['best_categorical_combination']\n",
        "\n",
        "        report_content.append(f\"- **Variáveis Contínuas Otimizadas**: `Concentracao_Quitosana_pct` = **{optimized_vals.get('Concentracao_Quitosana_pct', 'N/A'):.2f}%**, `Vazao_mL_h` = **{optimized_vals.get('Vazao_mL_h', 'N/A'):.2f} mL/h**\\n\") # [cite: 179]\n",
        "        report_content.append(f\"- **Cw Máximo Previsto (Otimizado)**: **{predicted_cw_opt:.4f} g/g** (em 24h, com FCS)\\n\") # [cite: 179]\n",
        "        report_content.append(f\"- **Mp Previsto (com Parâmetros Otimizados para Cw)**: **{predicted_mp_opt:.4f} %**\\n\\n\") # [cite: 179]\n",
        "        report_content.append(\"Este resultado indica as condições de processo para fabricar biopolímeros com a máxima capacidade de absorção de Cw no tempo e meio especificados, maximizando sua aplicabilidade em cenários como biomateriais absorventes ou sistemas de entrega de medicamentos.\\n\\n\")\n",
        "    else:\n",
        "        report_content.append(\"A otimização não foi realizada devido à falta de modelos preditivos treinados ou dados insuficientes.\\n\\n\")\n",
        "\n",
        "    report_content.append(\"#### Abordagem para Variáveis Categóricas na Otimização\\n\\n\") # [cite: 180]\n",
        "    report_content.append(\"Para variáveis categóricas de obtenção (ex: `Adicao_Metodo`, `Passagem_Agua_Reator`), a otimização direta com métodos de gradiente não é aplicável. A abordagem para incluir essas variáveis no processo de otimização seria:\\n\") # [cite: 180]\n",
        "    report_content.append(\"- **Testar cada categoria individualmente**: Executar a otimização das variáveis contínuas para cada combinação possível das variáveis categóricas e, em seguida, comparar os resultados para identificar a combinação categórica que oferece o melhor desempenho para o objetivo definido. Por exemplo, otimizar `Concentracao_Quitosana_pct` e `Vazao_mL_h` para cada `Tipo_Liquido` ou `Adicao_Metodo` diferente.\\n\") # [cite: 180]\n",
        "    report_content.append(\"- **Otimização Bayesiana ou Algoritmos Genéticos**: Para problemas mais complexos com muitas variáveis categóricas e contínuas, técnicas de otimização mais avançadas que podem lidar com diferentes tipos de variáveis de entrada de forma simultânea, como a otimização Bayesiana ou algoritmos genéticos, podem ser empregadas.\\n\\n\") # [cite: 180]\n",
        "    report_content.append(f\"No presente estudo de otimização contínua focada em Cw, a combinação categórica principal considerada foi: **{best_cat_opt_str}**.\\n\\n\") # [cite: 180]\n",
        "\n",
        "    report_content.append(\"---\")\n",
        "\n",
        "    report_content.append(\"## 6. Insights e Recomendações Estratégicas (Fase 4)\\n\\n\") # [cite: 181]\n",
        "    report_content.append(\"A análise e otimização dos biopolímeros fornecem insights valiosos para P&D e tomada de decisão estratégica, permitindo uma abordagem baseada em dados para o design e a produção de materiais:\\n\\n\") # [cite: 182]\n",
        "    report_content.append(\"- **Impacto dos Métodos de Obtenção**: As características de obtenção, como a **concentração de quitosana**, **vazão de processo** e **temperatura de secagem**, têm um impacto significativo nas propriedades de absorção e perda de massa. A otimização desses parâmetros é crucial para o desenvolvimento de biopolímeros 'customizados' para aplicações específicas.\\n\") # [cite: 183]\n",
        "    report_content.append(\"- **Seleção de Materiais e Meios**: A compreensão da interação entre os biopolímeros e os diferentes tipos de líquidos (FCS, Água, SS_0.9%) é fundamental. Para aplicações que exigem alta capacidade de absorção (ex: curativos, absorventes), biopolímeros que demonstram maior Cw em determinado meio são preferíveis. Para aplicações que demandam estabilidade a longo prazo (ex: embalagens, implantes), menor Mp é desejável.\\n\") # [cite: 183]\n",
        "    report_content.append(\"- **Otimização de Processos de Fabricação**: Os modelos preditivos e a ferramenta de otimização podem ser utilizados para guiar o desenvolvimento de novos processos de fabricação de forma mais eficiente, reduzindo o tempo e custo de experimentação empírica intensiva, direcionando os esforços para as condições mais promissoras.\\n\") # [cite: 183]\n",
        "    report_content.append(\"- **Recomendações Específicas**: Com base nos parâmetros otimizados para maximizar o Cw em FCS em 24h, recomenda-se que os processos de fabricação de biopolímeros considerem uma `Concentracao_Quitosana_pct` de aproximadamente **{optimized_vals.get('Concentracao_Quitosana_pct', 'N/A'):.2f}%** e uma `Vazao_mL_h` de **{optimized_vals.get('Vazao_mL_h', 'N/A'):.2f} mL/h**. Essas condições são projetadas para otimizar a performance de absorção, que é um fator crítico em aplicações biomédicas e pode levar a uma melhor performance do produto.\\n\\n\") # [cite: 183]\n",
        "\n",
        "    report_content.append(\"---\")\n",
        "\n",
        "    report_content.append(\"## 7. Conclusão\\n\\n\") # [cite: 184]\n",
        "    report_content.append(\"Este projeto demonstrou a eficácia da aplicação de Data Science na análise e otimização do comportamento de biopolímeros. A integração de dados de diversas fontes, a limpeza rigorosa, a análise exploratória detalhada e a modelagem preditiva avançada permitiram uma compreensão profunda das propriedades de absorção e perda de massa. A otimização, por sua vez, oferece uma ferramenta poderosa para projetar biopolímeros com características específicas, acelerando a inovação e o desenvolvimento de produtos.\\n\\n\") # [cite: 184]\n",
        "    report_content.append(\"### Limitações e Trabalhos Futuros\\n\\n\") # [cite: 184]\n",
        "    report_content.append(\"As principais limitações incluem a necessidade de mais dados para refinar os modelos e explorar interações mais complexas entre as features, além da validação experimental dos resultados. Trabalhos futuros poderiam incluir:\\n\") # [cite: 184]\n",
        "    report_content.append(\"- A incorporação de mais características de polímeros (ex: peso molecular, grau de desacetilação) para modelos mais precisos e holísticos do comportamento do biopolímero.\\n\") # [cite: 184]\n",
        "    report_content.append(\"- A exploração de técnicas de otimização multi-objetivo para balancear Cw e Mp simultaneamente, e métodos mais avançados para lidar com variáveis categóricas na otimização de forma integrada.\\n\") # [cite: 184]\n",
        "    report_content.append(\"- Validação experimental rigorosa das formulações otimizadas no laboratório para confirmar as previsões do modelo e refinar ainda mais os parâmetros ótimos.\\n\\n\") # [cite: 184]\n",
        "\n",
        "    # Salvar o relatório\n",
        "    report_file_path = os.path.join(reports_dir, \"relatorio_biopolimeros_detalhado.md\")\n",
        "    with open(report_file_path, \"w\", encoding=\"utf-8\") as f: # [cite: 52]\n",
        "        f.writelines(report_content) # [cite: 53]\n",
        "    print(f\"Relatório detalhado gerado em {report_file_path}\") # [cite: 53]"
      ],
      "metadata": {
        "id": "NvafvptGncsf"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    data_directory = 'biopolymer_analysis_data'\n",
        "    reports_directory = 'biopolymer_analysis/reports'\n",
        "\n",
        "    # Create reports directory if it doesn't exist\n",
        "    os.makedirs(reports_directory, exist_ok=True)\n",
        "\n",
        "    # Global collector for report data\n",
        "    report_data_collector = {\n",
        "        'initial_data_info': {},\n",
        "        'cleaned_data_info': {},\n",
        "        'consolidated_data_info': {\n",
        "            'absorcao_info': None, 'absorcao_head': None, 'absorcao_describe': None, 'absorcao_nan': None,\n",
        "            'perda_info': None, 'perda_head': None, 'perda_describe': None, 'perda_nan': None\n",
        "        },\n",
        "        'eda_insights': [],\n",
        "        'eda_image_references': [],\n",
        "        'model_evaluation': {},\n",
        "        'feature_importance_abs': None,\n",
        "        'feature_importance_perda': None,\n",
        "        'simulation_results': [],\n",
        "        'optimization_results': {}\n",
        "    }\n",
        "\n",
        "    # Consolidar dados de absorção\n",
        "    df_absorcao_consolidado = consolidate_absorption_data(data_directory)\n",
        "\n",
        "    # Consolidar dados de perda de massa\n",
        "    df_perda_consolidado = consolidate_mass_loss_data(data_directory)\n",
        "\n",
        "    # Carregar e processar dados de métodos de obtenção\n",
        "    df_metodos_obtencao = load_and_process_methods_data(data_directory)\n",
        "\n",
        "    # Transformar dados de absorção para formato longo\n",
        "    id_vars_absorcao = ['id_amostra', 'massa_seca_inicial', 'Tipo_Liquido', 'metodo'] # [cite: 35]\n",
        "    value_vars_prefix_absorcao_mass = ['massa_umida_final_'] # [cite: 36]\n",
        "    value_vars_prefix_absorcao_cw = ['Cw_'] # [cite: 36]\n",
        "\n",
        "    df_absorcao_mass_long = transform_to_long_format(df_absorcao_consolidado, id_vars_absorcao, value_vars_prefix_absorcao_mass, 'Massa_Umida_Final_Unificado', 'Tempo_h') # [cite: 36]\n",
        "    df_absorcao_cw_long = transform_to_long_format(df_absorcao_consolidado, id_vars_absorcao, value_vars_prefix_absorcao_cw, 'CW_gg_Unificado', 'Tempo_h') # [cite: 36]\n",
        "\n",
        "    # Juntar as colunas de massa e Cw no mesmo DataFrame longo de absorção\n",
        "    df_absorcao_final = pd.merge(df_absorcao_mass_long, df_absorcao_cw_long, on=id_vars_absorcao + ['Tempo_h'], how='inner') # [cite: 36]\n",
        "    print(\"\\n--- DataFrame de Absorção Final (Formato Longo) ---\")\n",
        "    print(df_absorcao_final.info())\n",
        "    print(df_absorcao_final.head())\n",
        "    print(f\"NaNs em df_absorcao_final após transformação para formato longo:\\n{df_absorcao_final.isnull().sum()[df_absorcao_final.isnull().sum() > 0]}\")\n",
        "\n",
        "    # Transformar dados de perda de massa para formato longo\n",
        "    id_vars_perda = ['id_amostra', 'peso_seco_inicial', 'Tipo_Liquido', 'metodo'] # [cite: 37]\n",
        "    value_vars_prefix_perda_mass = ['peso_seco_final_'] # [cite: 37]\n",
        "    value_vars_prefix_perda_mp = ['Mp_'] # [cite: 37]\n",
        "\n",
        "    df_perda_mass_long = transform_to_long_format(df_perda_consolidado, id_vars_perda, value_vars_prefix_perda_mass, 'Peso_Seco_Final_Unificado', 'Tempo_h') # [cite: 37]\n",
        "    df_perda_mp_long = transform_to_long_format(df_perda_consolidado, id_vars_perda, value_vars_prefix_perda_mp, 'Mp_Percentual_Unificado', 'Tempo_h') # [cite: 37]\n",
        "\n",
        "    # Juntar as colunas de peso e Mp no mesmo DataFrame longo de perda de massa\n",
        "    df_perda_final = pd.merge(df_perda_mass_long, df_perda_mp_long, on=id_vars_perda + ['Tempo_h'], how='inner') # [cite: 37]\n",
        "    print(\"\\n--- DataFrame de Perda de Massa Final (Formato Longo) ---\")\n",
        "    print(df_perda_final.info())\n",
        "    print(df_perda_final.head())\n",
        "    print(f\"NaNs em df_perda_final após transformação para formato longo:\\n{df_perda_final.isnull().sum()[df_perda_final.isnull().sum() > 0]}\") # [cite: 38]\n",
        "\n",
        "    # Integrar com dados de métodos de obtenção\n",
        "    df_absorcao_integrado = integrate_data(df_absorcao_final, df_metodos_obtencao) # [cite: 38]\n",
        "    df_perda_integrado = integrate_data(df_perda_final, df_metodos_obtencao) # [cite: 38]\n",
        "\n",
        "    # Capture consolidated data info for report\n",
        "    report_data_collector['consolidated_data_info']['absorcao_info'] = capture_df_info(df_absorcao_integrado)\n",
        "    report_data_collector['consolidated_data_info']['absorcao_head'] = df_absorcao_integrado.head().to_markdown(index=False, numalign=\"left\", stralign=\"left\")\n",
        "    report_data_collector['consolidated_data_info']['absorcao_describe'] = capture_df_describe(df_absorcao_integrado)\n",
        "    report_data_collector['consolidated_data_info']['absorcao_nan'] = df_absorcao_integrado.isnull().sum()[df_absorcao_integrado.isnull().sum() > 0].to_markdown()\n",
        "\n",
        "    report_data_collector['consolidated_data_info']['perda_info'] = capture_df_info(df_perda_integrado)\n",
        "    report_data_collector['consolidated_data_info']['perda_head'] = df_perda_integrado.head().to_markdown(index=False, numalign=\"left\", stralign=\"left\")\n",
        "    report_data_collector['consolidated_data_info']['perda_describe'] = capture_df_describe(df_perda_integrado)\n",
        "    report_data_collector['consolidated_data_info']['perda_nan'] = df_perda_integrado.isnull().sum()[df_perda_integrado.isnull().sum() > 0].to_markdown()\n",
        "\n",
        "    print(\"\\n--- DataFrames Finais Integrados ---\")\n",
        "    print(\"Absorção Integrado:\")\n",
        "    print(df_absorcao_integrado.info())\n",
        "    print(df_absorcao_integrado.head())\n",
        "    print(f\"NaNs em df_absorcao_integrado após integração:\\n{df_absorcao_integrado.isnull().sum()[df_absorcao_integrado.isnull().sum() > 0]}\")\n",
        "    print(\"\\nPerda de Massa Integrado:\")\n",
        "    print(df_perda_integrado.info())\n",
        "    print(df_perda_integrado.head())\n",
        "    print(f\"NaNs em df_perda_integrado após integração:\\n{df_perda_integrado.isnull().sum()[df_perda_integrado.isnull().sum() > 0]}\")\n",
        "\n",
        "    print(f\"\\nShape de df_absorcao_integrado antes da modelagem: {df_absorcao_integrado.shape}\") # [cite: 39]\n",
        "    print(f\"Shape de df_perda_integrado antes da modelagem: {df_perda_integrado.shape}\") # [cite: 39]\n",
        "\n",
        "    # Realizar EDA e gerar visualizações\n",
        "    perform_eda_and_visualizations(df_absorcao_integrado, df_perda_integrado, reports_directory)\n",
        "\n",
        "    # Implementar modelos preditivos (usando o dataframe completo, sem amostragem agressiva)\n",
        "    best_model_abs, best_model_perda, all_model_metrics, X_abs_for_opt, X_perda_for_opt = implement_predictive_models(df_absorcao_integrado, df_perda_integrado, reports_directory) # [cite: 40]\n",
        "\n",
        "    # Store model results for report\n",
        "    report_data_collector['model_evaluation'] = all_model_metrics\n",
        "    report_data_collector['feature_importance_abs'] = all_model_metrics['absorption'].get('Feature_Importance')\n",
        "    report_data_collector['feature_importance_perda'] = all_model_metrics['mass_loss'].get('Feature_Importance')\n",
        "\n",
        "    # Run Simulations\n",
        "    if best_model_abs and best_model_perda and not X_abs_for_opt.empty and not X_perda_for_opt.empty:\n",
        "        sim_results = run_simulations(best_model_abs, best_model_perda, X_abs_for_opt, X_perda_for_opt, reports_directory)\n",
        "        report_data_collector['simulation_results'] = sim_results\n",
        "    else:\n",
        "        print(\"Modelos ou dados de template insuficientes para simulações.\")\n",
        "\n",
        "    # Otimização\n",
        "    if best_model_abs and best_model_perda and not X_abs_for_opt.empty and not X_perda_for_opt.empty: # [cite: 40]\n",
        "        optimized_params, predicted_cw_opt, predicted_mp_opt, best_categorical_opt_str = optimize_biopolymer_properties(best_model_abs, best_model_perda, X_abs_for_opt, X_perda_for_opt) # [cite: 45]\n",
        "        report_data_collector['optimization_results'] = {\n",
        "            'optimized_values': optimized_params,\n",
        "            'predicted_cw': predicted_cw_opt,\n",
        "            'predicted_mp': predicted_mp_opt,\n",
        "            'best_categorical_combination': best_categorical_opt_str\n",
        "        }\n",
        "    else:\n",
        "        print(\"Modelos preditivos não foram treinados ou dados de template insuficientes, otimização não realizada.\")\n",
        "        report_data_collector['optimization_results'] = {\n",
        "            'optimized_values': None,\n",
        "            'predicted_cw': None,\n",
        "            'predicted_mp': None,\n",
        "            'best_categorical_combination': \"N/A (modelos não treinados ou dados insuficientes)\"\n",
        "        }\n",
        "\n",
        "\n",
        "    # Gerar o relatório final\n",
        "    generate_detailed_report_markdown(report_data_collector, reports_directory)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "KhUqpnxdnf4O",
        "outputId": "8a3e8e94-5bdf-48c9-ef57-6f756d8890f1"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Carregando e Inspecionando Absorção (FCS): Absorcao_FCS.csv ---\n",
            "Primeiras 5 linhas:\n",
            "  id_amostra  massa_seca_inicial  massa_umida_final_1h  Cw_1h  \\\n",
            "0        A-1              0.0197               0.00378    0.0   \n",
            "1        A-2              0.0170               0.00458    0.0   \n",
            "2        A-3              0.0226               0.00526    0.0   \n",
            "3        A-4              0.0200               0.00147    0.0   \n",
            "4        A-5              0.0140               0.00436    0.0   \n",
            "\n",
            "   massa_umida_final_2h  Cw_2h  massa_umida_final_4h     Cw_4h  \\\n",
            "0               0.00547    0.0               0.02419  0.227919   \n",
            "1               0.00834    0.0               0.01960  0.152941   \n",
            "2               0.00737    0.0               0.02790  0.234513   \n",
            "3               0.00602    0.0               0.02454  0.227000   \n",
            "4               0.00357    0.0               0.01639  0.170714   \n",
            "\n",
            "   massa_umida_final_8h  Cw_8h  massa_umida_final_16h  Cw_16h  \\\n",
            "0               0.04710   1.39                0.10152    4.15   \n",
            "1               0.03991   1.35                0.07470    3.39   \n",
            "2               0.04978   1.20                0.10423    3.61   \n",
            "3               0.04752   1.38                0.10256    4.13   \n",
            "4               0.03531   1.52                0.06476    3.63   \n",
            "\n",
            "   massa_umida_final_24h  Cw_24h  massa_umida_final_48h  Cw_48h metodo  \n",
            "0                0.15328    6.78                0.34500   16.51     M1  \n",
            "1                0.11889    5.99                0.34500   19.29     M2  \n",
            "2                0.16487    6.30                0.34500   14.27     M3  \n",
            "3                0.13777    5.89                0.34500   16.25     M4  \n",
            "4                0.10064    6.19                0.26683   18.06     M5  \n",
            "\n",
            "Informações do DataFrame:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 330 entries, 0 to 329\n",
            "Data columns (total 17 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   id_amostra             330 non-null    object \n",
            " 1   massa_seca_inicial     330 non-null    float64\n",
            " 2   massa_umida_final_1h   330 non-null    float64\n",
            " 3   Cw_1h                  330 non-null    float64\n",
            " 4   massa_umida_final_2h   330 non-null    float64\n",
            " 5   Cw_2h                  330 non-null    float64\n",
            " 6   massa_umida_final_4h   330 non-null    float64\n",
            " 7   Cw_4h                  330 non-null    float64\n",
            " 8   massa_umida_final_8h   330 non-null    float64\n",
            " 9   Cw_8h                  330 non-null    float64\n",
            " 10  massa_umida_final_16h  330 non-null    float64\n",
            " 11  Cw_16h                 330 non-null    float64\n",
            " 12  massa_umida_final_24h  330 non-null    float64\n",
            " 13  Cw_24h                 330 non-null    float64\n",
            " 14  massa_umida_final_48h  330 non-null    float64\n",
            " 15  Cw_48h                 330 non-null    float64\n",
            " 16  metodo                 330 non-null    object \n",
            "dtypes: float64(15), object(2)\n",
            "memory usage: 44.0+ KB\n",
            "\n",
            "\n",
            "Estatísticas Descritivas:\n",
            "       massa_seca_inicial  massa_umida_final_1h  Cw_1h  massa_umida_final_2h  \\\n",
            "count          330.000000            330.000000  330.0            330.000000   \n",
            "mean             0.017182              0.003193    0.0              0.006019   \n",
            "std              0.003495              0.001698    0.0              0.003291   \n",
            "min              0.010800              0.000480    0.0              0.000830   \n",
            "25%              0.014225              0.001770    0.0              0.003195   \n",
            "50%              0.017350              0.003120    0.0              0.006010   \n",
            "75%              0.020300              0.004225    0.0              0.008330   \n",
            "max              0.023200              0.007100    0.0              0.015090   \n",
            "\n",
            "       Cw_2h  massa_umida_final_4h       Cw_4h  massa_umida_final_8h  \\\n",
            "count  330.0            330.000000  330.000000            330.000000   \n",
            "mean     0.0              0.020610    0.199389              0.041223   \n",
            "std      0.0              0.004343    0.062016              0.008621   \n",
            "min      0.0              0.012080    0.092823              0.024840   \n",
            "25%      0.0              0.016700    0.145022              0.033938   \n",
            "50%      0.0              0.020730    0.195515              0.040705   \n",
            "75%      0.0              0.024235    0.251802              0.048148   \n",
            "max      0.0              0.029730    0.306087              0.060040   \n",
            "\n",
            "            Cw_8h  massa_umida_final_16h      Cw_16h  massa_umida_final_24h  \\\n",
            "count  330.000000             330.000000  330.000000             330.000000   \n",
            "mean     1.400545               0.082214    3.787818               0.123520   \n",
            "std      0.128616               0.017075    0.258880               0.025836   \n",
            "min      1.180000               0.048130    3.360000               0.073700   \n",
            "25%      1.280000               0.068208    3.560000               0.101892   \n",
            "50%      1.420000               0.082445    3.780000               0.124360   \n",
            "75%      1.510000               0.096760    4.010000               0.145355   \n",
            "max      1.620000               0.118900    4.230000               0.181480   \n",
            "\n",
            "           Cw_24h  massa_umida_final_48h      Cw_48h  \n",
            "count  330.000000             330.000000  330.000000  \n",
            "mean     6.190273               0.296383   16.512788  \n",
            "std      0.368846               0.049703    2.398428  \n",
            "min      5.540000               0.180400   12.590000  \n",
            "25%      5.890000               0.259520   14.617500  \n",
            "50%      6.205000               0.303955   16.060000  \n",
            "75%      6.510000               0.345000   18.212500  \n",
            "max      6.840000               0.345000   21.800000  \n",
            "Contagem inicial de linhas: 330, Colunas: 17\n",
            "\n",
            "--- Limpando e Processando Absorção (FCS) ---\n",
            "Duplicatas removidas. Linhas antes: 330, Linhas depois: 330\n",
            "Shape final de Absorção (FCS) após limpeza: (330, 17)\n",
            "NaNs em Absorção (FCS) após limpeza:\n",
            "id_amostra    330\n",
            "dtype: int64\n",
            "\n",
            "--- Carregando e Inspecionando Absorção (Agua): Absorcao_Agua.csv ---\n",
            "Primeiras 5 linhas:\n",
            "  id_amostra  massa_seca_inicial  massa_umida_final_1h  Cw_1h  \\\n",
            "0        A-1              0.0190               0.00504    0.0   \n",
            "1        A-2              0.0168               0.00158    0.0   \n",
            "2        A-3              0.0204               0.00431    0.0   \n",
            "3        A-4              0.0154               0.00270    0.0   \n",
            "4        A-5              0.0230               0.00457    0.0   \n",
            "\n",
            "   massa_umida_final_2h  Cw_2h  massa_umida_final_4h   Cw_4h  \\\n",
            "0               0.00405    0.0               0.02378  0.2516   \n",
            "1               0.00709    0.0               0.02108  0.2548   \n",
            "2               0.00376    0.0               0.02598  0.2735   \n",
            "3               0.00652    0.0               0.01685  0.0942   \n",
            "4               0.00356    0.0               0.02806  0.2200   \n",
            "\n",
            "   massa_umida_final_8h  Cw_8h  massa_umida_final_16h  Cw_16h  \\\n",
            "0               0.04380   1.31                0.08515    3.48   \n",
            "1               0.04067   1.42                0.07730    3.60   \n",
            "2               0.05064   1.48                0.09090    3.46   \n",
            "3               0.03934   1.55                0.07815    4.07   \n",
            "4               0.05659   1.46                0.10621    3.62   \n",
            "\n",
            "   massa_umida_final_24h  Cw_24h  massa_umida_final_48h  Cw_48h metodo  \n",
            "0                0.12540    5.60                0.27131   13.28     M1  \n",
            "1                0.11224    5.68                0.30253   17.01     M2  \n",
            "2                0.13401    5.57                0.28766   13.10     M3  \n",
            "3                0.10837    6.04                0.21945   13.25     M4  \n",
            "4                0.17594    6.65                0.31399   12.65     M5  \n",
            "\n",
            "Informações do DataFrame:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 330 entries, 0 to 329\n",
            "Data columns (total 17 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   id_amostra             330 non-null    object \n",
            " 1   massa_seca_inicial     330 non-null    float64\n",
            " 2   massa_umida_final_1h   330 non-null    float64\n",
            " 3   Cw_1h                  330 non-null    float64\n",
            " 4   massa_umida_final_2h   330 non-null    float64\n",
            " 5   Cw_2h                  330 non-null    float64\n",
            " 6   massa_umida_final_4h   330 non-null    float64\n",
            " 7   Cw_4h                  330 non-null    float64\n",
            " 8   massa_umida_final_8h   330 non-null    float64\n",
            " 9   Cw_8h                  330 non-null    float64\n",
            " 10  massa_umida_final_16h  330 non-null    float64\n",
            " 11  Cw_16h                 330 non-null    float64\n",
            " 12  massa_umida_final_24h  330 non-null    float64\n",
            " 13  Cw_24h                 330 non-null    float64\n",
            " 14  massa_umida_final_48h  330 non-null    float64\n",
            " 15  Cw_48h                 330 non-null    float64\n",
            " 16  metodo                 330 non-null    object \n",
            "dtypes: float64(15), object(2)\n",
            "memory usage: 44.0+ KB\n",
            "\n",
            "\n",
            "Estatísticas Descritivas:\n",
            "       massa_seca_inicial  massa_umida_final_1h  Cw_1h  massa_umida_final_2h  \\\n",
            "count          330.000000            330.000000  330.0            330.000000   \n",
            "mean             0.017120              0.002939    0.0              0.006137   \n",
            "std              0.003513              0.001590    0.0              0.003335   \n",
            "min              0.010800              0.000340    0.0              0.000710   \n",
            "25%              0.014200              0.001583    0.0              0.003595   \n",
            "50%              0.017200              0.002885    0.0              0.006005   \n",
            "75%              0.020275              0.004060    0.0              0.008292   \n",
            "max              0.023200              0.007370    0.0              0.014740   \n",
            "\n",
            "       Cw_2h  massa_umida_final_4h       Cw_4h  massa_umida_final_8h  \\\n",
            "count  330.0            330.000000  330.000000            330.000000   \n",
            "mean     0.0              0.020575    0.201750              0.041267   \n",
            "std      0.0              0.004366    0.063565              0.008787   \n",
            "min      0.0              0.011980    0.094000              0.024450   \n",
            "25%      0.0              0.017003    0.146225              0.033967   \n",
            "50%      0.0              0.020620    0.204350              0.041510   \n",
            "75%      0.0              0.024188    0.257875              0.048460   \n",
            "max      0.0              0.029210    0.305900              0.059870   \n",
            "\n",
            "            Cw_8h  massa_umida_final_16h      Cw_16h  massa_umida_final_24h  \\\n",
            "count  330.000000             330.000000  330.000000             330.000000   \n",
            "mean     1.409879               0.082288    3.811848               0.123357   \n",
            "std      0.129765               0.016973    0.251218               0.026051   \n",
            "min      1.180000               0.049780    3.360000               0.073590   \n",
            "25%      1.300000               0.068057    3.600000               0.103077   \n",
            "50%      1.420000               0.082590    3.815000               0.123740   \n",
            "75%      1.520000               0.096048    4.050000               0.142870   \n",
            "max      1.620000               0.119430    4.230000               0.176260   \n",
            "\n",
            "           Cw_24h  massa_umida_final_48h      Cw_48h  \n",
            "count  330.000000             330.000000  330.000000  \n",
            "mean     6.206212               0.291216   16.242788  \n",
            "std      0.375452               0.051978    2.348141  \n",
            "min      5.540000               0.180400   12.580000  \n",
            "25%      5.882500               0.251358   14.355000  \n",
            "50%      6.225000               0.300640   15.830000  \n",
            "75%      6.520000               0.345000   18.010000  \n",
            "max      6.840000               0.345000   21.800000  \n",
            "Contagem inicial de linhas: 330, Colunas: 17\n",
            "\n",
            "--- Limpando e Processando Absorção (Agua) ---\n",
            "Duplicatas removidas. Linhas antes: 330, Linhas depois: 330\n",
            "Shape final de Absorção (Agua) após limpeza: (330, 17)\n",
            "NaNs em Absorção (Agua) após limpeza:\n",
            "id_amostra    330\n",
            "dtype: int64\n",
            "\n",
            "--- Carregando e Inspecionando Absorção (SS_0.9%): Absorcao_SS _0,9%.csv ---\n",
            "Primeiras 5 linhas:\n",
            "  id_amostra  massa_seca_inicial  massa_umida_final_1h  Cw_1h  \\\n",
            "0        A-1              0.0215               0.00353    0.0   \n",
            "1        A-2              0.0197               0.00107    0.0   \n",
            "2        A-3              0.0218               0.00107    0.0   \n",
            "3        A-4              0.0157               0.00306    0.0   \n",
            "4        A-5              0.0196               0.00412    0.0   \n",
            "\n",
            "   massa_umida_final_2h  Cw_2h  massa_umida_final_4h     Cw_4h  \\\n",
            "0               0.00289    0.0               0.02568  0.194400   \n",
            "1               0.00869    0.0               0.02431  0.234010   \n",
            "2               0.00613    0.0               0.02455  0.126147   \n",
            "3               0.00736    0.0               0.01857  0.182803   \n",
            "4               0.00305    0.0               0.02419  0.234184   \n",
            "\n",
            "   massa_umida_final_8h  Cw_8h  massa_umida_final_16h  Cw_16h  \\\n",
            "0               0.05275   1.45                0.09442    3.39   \n",
            "1               0.04951   1.51                0.09112    3.63   \n",
            "2               0.05175   1.37                0.10190    3.67   \n",
            "3               0.03682   1.35                0.06970    3.44   \n",
            "4               0.04635   1.36                0.09830    4.02   \n",
            "\n",
            "   massa_umida_final_24h  Cw_24h  massa_umida_final_48h  Cw_48h metodo  \n",
            "0                0.16557    6.70                0.34500   15.05     M1  \n",
            "1                0.15339    6.79                0.34500   16.51     M2  \n",
            "2                0.15537    6.13                0.34500   14.83     M3  \n",
            "3                0.10313    5.57                0.28384   17.08     M4  \n",
            "4                0.12862    5.56                0.34500   16.60     M5  \n",
            "\n",
            "Informações do DataFrame:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 330 entries, 0 to 329\n",
            "Data columns (total 17 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   id_amostra             330 non-null    object \n",
            " 1   massa_seca_inicial     330 non-null    float64\n",
            " 2   massa_umida_final_1h   330 non-null    float64\n",
            " 3   Cw_1h                  330 non-null    float64\n",
            " 4   massa_umida_final_2h   330 non-null    float64\n",
            " 5   Cw_2h                  330 non-null    float64\n",
            " 6   massa_umida_final_4h   330 non-null    float64\n",
            " 7   Cw_4h                  330 non-null    float64\n",
            " 8   massa_umida_final_8h   330 non-null    float64\n",
            " 9   Cw_8h                  330 non-null    float64\n",
            " 10  massa_umida_final_16h  330 non-null    float64\n",
            " 11  Cw_16h                 330 non-null    float64\n",
            " 12  massa_umida_final_24h  330 non-null    float64\n",
            " 13  Cw_24h                 330 non-null    float64\n",
            " 14  massa_umida_final_48h  330 non-null    float64\n",
            " 15  Cw_48h                 330 non-null    float64\n",
            " 16  metodo                 330 non-null    object \n",
            "dtypes: float64(15), object(2)\n",
            "memory usage: 44.0+ KB\n",
            "\n",
            "\n",
            "Estatísticas Descritivas:\n",
            "       massa_seca_inicial  massa_umida_final_1h  Cw_1h  massa_umida_final_2h  \\\n",
            "count          330.000000            330.000000  330.0            330.000000   \n",
            "mean             0.017089              0.003120    0.0              0.005947   \n",
            "std              0.003537              0.001653    0.0              0.003149   \n",
            "min              0.010800              0.000420    0.0              0.000720   \n",
            "25%              0.014200              0.001743    0.0              0.003325   \n",
            "50%              0.017000              0.002910    0.0              0.005645   \n",
            "75%              0.020200              0.004320    0.0              0.008223   \n",
            "max              0.023200              0.007540    0.0              0.014580   \n",
            "\n",
            "       Cw_2h  massa_umida_final_4h       Cw_4h  massa_umida_final_8h  \\\n",
            "count  330.0            330.000000  330.000000            330.000000   \n",
            "mean     0.0              0.020417    0.195523              0.041109   \n",
            "std      0.0              0.004279    0.062197              0.008817   \n",
            "min      0.0              0.012030    0.093233              0.024240   \n",
            "25%      0.0              0.017110    0.140186              0.033997   \n",
            "50%      0.0              0.020435    0.191435              0.041120   \n",
            "75%      0.0              0.023875    0.254236              0.048160   \n",
            "max      0.0              0.029030    0.305769              0.060620   \n",
            "\n",
            "            Cw_8h  massa_umida_final_16h      Cw_16h  massa_umida_final_24h  \\\n",
            "count  330.000000             330.000000  330.000000             330.000000   \n",
            "mean     1.404848               0.081876    3.794697               0.122320   \n",
            "std      0.128039               0.017182    0.244268               0.025802   \n",
            "min      1.180000               0.047880    3.370000               0.070860   \n",
            "25%      1.290000               0.067543    3.600000               0.102047   \n",
            "50%      1.420000               0.081625    3.780000               0.120140   \n",
            "75%      1.520000               0.096260    4.010000               0.143585   \n",
            "max      1.620000               0.117990    4.220000               0.176840   \n",
            "\n",
            "           Cw_24h  massa_umida_final_48h      Cw_48h  \n",
            "count  330.000000             330.000000  330.000000  \n",
            "mean     6.160091               0.293193   16.351273  \n",
            "std      0.370547               0.054892    2.250648  \n",
            "min      5.540000               0.180400   12.620000  \n",
            "25%      5.862500               0.244163   14.562500  \n",
            "50%      6.150000               0.311705   16.010000  \n",
            "75%      6.440000               0.345000   18.237500  \n",
            "max      6.840000               0.345000   21.530000  \n",
            "Contagem inicial de linhas: 330, Colunas: 17\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-73-1656144624.py:53: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].mean(), inplace=True)\n",
            "/tmp/ipython-input-73-1656144624.py:53: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].mean(), inplace=True)\n",
            "/tmp/ipython-input-73-1656144624.py:53: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].mean(), inplace=True)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Limpando e Processando Absorção (SS_0.9%) ---\n",
            "Duplicatas removidas. Linhas antes: 330, Linhas depois: 330\n",
            "Shape final de Absorção (SS_0.9%) após limpeza: (330, 17)\n",
            "NaNs em Absorção (SS_0.9%) após limpeza:\n",
            "id_amostra    330\n",
            "dtype: int64\n",
            "\n",
            "--- DataFrame de Absorção Consolidado ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 990 entries, 0 to 989\n",
            "Data columns (total 18 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   id_amostra             0 non-null      float64\n",
            " 1   massa_seca_inicial     990 non-null    float64\n",
            " 2   massa_umida_final_1h   990 non-null    float64\n",
            " 3   Cw_1h                  990 non-null    float64\n",
            " 4   massa_umida_final_2h   990 non-null    float64\n",
            " 5   Cw_2h                  990 non-null    float64\n",
            " 6   massa_umida_final_4h   990 non-null    float64\n",
            " 7   Cw_4h                  990 non-null    float64\n",
            " 8   massa_umida_final_8h   990 non-null    float64\n",
            " 9   Cw_8h                  990 non-null    float64\n",
            " 10  massa_umida_final_16h  990 non-null    float64\n",
            " 11  Cw_16h                 990 non-null    float64\n",
            " 12  massa_umida_final_24h  990 non-null    float64\n",
            " 13  Cw_24h                 990 non-null    float64\n",
            " 14  massa_umida_final_48h  990 non-null    float64\n",
            " 15  Cw_48h                 990 non-null    float64\n",
            " 16  metodo                 990 non-null    object \n",
            " 17  Tipo_Liquido           990 non-null    object \n",
            "dtypes: float64(16), object(2)\n",
            "memory usage: 139.3+ KB\n",
            "None\n",
            "   id_amostra  massa_seca_inicial  massa_umida_final_1h  Cw_1h  \\\n",
            "0         NaN              0.0197               0.00378    0.0   \n",
            "1         NaN              0.0170               0.00458    0.0   \n",
            "2         NaN              0.0226               0.00526    0.0   \n",
            "3         NaN              0.0200               0.00147    0.0   \n",
            "4         NaN              0.0140               0.00436    0.0   \n",
            "\n",
            "   massa_umida_final_2h  Cw_2h  massa_umida_final_4h     Cw_4h  \\\n",
            "0               0.00547    0.0               0.02419  0.227919   \n",
            "1               0.00834    0.0               0.01960  0.152941   \n",
            "2               0.00737    0.0               0.02790  0.234513   \n",
            "3               0.00602    0.0               0.02454  0.227000   \n",
            "4               0.00357    0.0               0.01639  0.170714   \n",
            "\n",
            "   massa_umida_final_8h  Cw_8h  massa_umida_final_16h  Cw_16h  \\\n",
            "0               0.04710   1.39                0.10152    4.15   \n",
            "1               0.03991   1.35                0.07470    3.39   \n",
            "2               0.04978   1.20                0.10423    3.61   \n",
            "3               0.04752   1.38                0.10256    4.13   \n",
            "4               0.03531   1.52                0.06476    3.63   \n",
            "\n",
            "   massa_umida_final_24h  Cw_24h  massa_umida_final_48h  Cw_48h metodo  \\\n",
            "0                0.15328    6.78                0.34500   16.51     M1   \n",
            "1                0.11889    5.99                0.34500   19.29     M2   \n",
            "2                0.16487    6.30                0.34500   14.27     M3   \n",
            "3                0.13777    5.89                0.34500   16.25     M4   \n",
            "4                0.10064    6.19                0.26683   18.06     M5   \n",
            "\n",
            "  Tipo_Liquido  \n",
            "0          FCS  \n",
            "1          FCS  \n",
            "2          FCS  \n",
            "3          FCS  \n",
            "4          FCS  \n",
            "NaNs em DataFrame de Absorção Consolidado:\n",
            "id_amostra    990\n",
            "dtype: int64\n",
            "\n",
            "--- Carregando e Inspecionando Perda de Massa (Agua): perda_massa_Agua.csv ---\n",
            "Primeiras 5 linhas:\n",
            "  id_amostra  peso_seco_inicial  peso_seco_final_1h  Mp_1h  \\\n",
            "0        A-1             0.0210             0.00068  96.78   \n",
            "1        A-2             0.0213             0.00038  98.21   \n",
            "2        A-3             0.0307             0.00080  97.39   \n",
            "3        A-4             0.0180             0.00024  98.69   \n",
            "4        A-5             0.0276             0.00072  97.38   \n",
            "\n",
            "   peso_seco_final_2h  Mp_2h  peso_seco_final_4h  Mp_4h  peso_seco_final_8h  \\\n",
            "0             0.00142  93.23             0.00488  76.77             0.00591   \n",
            "1             0.00319  85.02             0.00427  79.93             0.00629   \n",
            "2             0.00353  88.50             0.00691  77.50             0.01056   \n",
            "3             0.00111  93.85             0.00351  80.51             0.00555   \n",
            "4             0.00256  90.74             0.00525  80.97             0.00983   \n",
            "\n",
            "   Mp_8h  peso_seco_final_16h  Mp_16h  peso_seco_final_24h  Mp_24h  \\\n",
            "0  71.84              0.00942   55.12              0.01295   38.35   \n",
            "1  70.47              0.00827   61.16              0.01318   38.14   \n",
            "2  65.59              0.01178   61.62              0.01799   41.40   \n",
            "3  69.16              0.00776   56.87              0.01086   39.69   \n",
            "4  64.39              0.01205   56.33              0.01717   37.78   \n",
            "\n",
            "   peso_seco_final_48h  Mp_48h metodo  \n",
            "0              0.01972    6.11     M1  \n",
            "1              0.01964    7.78     M2  \n",
            "2              0.02920    4.89     M3  \n",
            "3              0.01644    8.67     M4  \n",
            "4              0.02462   10.79     M5  \n",
            "\n",
            "Informações do DataFrame:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 330 entries, 0 to 329\n",
            "Data columns (total 17 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   id_amostra           330 non-null    object \n",
            " 1   peso_seco_inicial    330 non-null    float64\n",
            " 2   peso_seco_final_1h   330 non-null    float64\n",
            " 3   Mp_1h                330 non-null    float64\n",
            " 4   peso_seco_final_2h   330 non-null    float64\n",
            " 5   Mp_2h                330 non-null    float64\n",
            " 6   peso_seco_final_4h   330 non-null    float64\n",
            " 7   Mp_4h                330 non-null    float64\n",
            " 8   peso_seco_final_8h   330 non-null    float64\n",
            " 9   Mp_8h                330 non-null    float64\n",
            " 10  peso_seco_final_16h  330 non-null    float64\n",
            " 11  Mp_16h               330 non-null    float64\n",
            " 12  peso_seco_final_24h  330 non-null    float64\n",
            " 13  Mp_24h               330 non-null    float64\n",
            " 14  peso_seco_final_48h  330 non-null    float64\n",
            " 15  Mp_48h               330 non-null    float64\n",
            " 16  metodo               330 non-null    object \n",
            "dtypes: float64(15), object(2)\n",
            "memory usage: 44.0+ KB\n",
            "\n",
            "\n",
            "Estatísticas Descritivas:\n",
            "       peso_seco_inicial  peso_seco_final_1h       Mp_1h  peso_seco_final_2h  \\\n",
            "count         330.000000          330.000000  330.000000          330.000000   \n",
            "mean            0.022737            0.000586   97.411424            0.002219   \n",
            "std             0.005976            0.000250    0.837502            0.000892   \n",
            "min             0.011900            0.000140   96.010000            0.000650   \n",
            "25%             0.017900            0.000390   96.732500            0.001560   \n",
            "50%             0.022950            0.000540   97.360000            0.002080   \n",
            "75%             0.027875            0.000730   98.125000            0.002798   \n",
            "max             0.033500            0.001260   98.900000            0.004640   \n",
            "\n",
            "            Mp_2h  peso_seco_final_4h       Mp_4h  peso_seco_final_8h  \\\n",
            "count  330.000000          330.000000  330.000000          330.000000   \n",
            "mean    90.255727            0.004559   79.918727            0.006976   \n",
            "std      2.826466            0.001297    2.372179            0.002006   \n",
            "min     85.020000            0.001960   76.000000            0.003240   \n",
            "25%     87.662500            0.003533   77.990000            0.005443   \n",
            "50%     90.390000            0.004515   79.865000            0.006790   \n",
            "75%     92.777500            0.005448   81.925000            0.008497   \n",
            "max     94.860000            0.007840   84.000000            0.011510   \n",
            "\n",
            "            Mp_8h  peso_seco_final_16h      Mp_16h  peso_seco_final_24h  \\\n",
            "count  330.000000           330.000000  330.000000           330.000000   \n",
            "mean    69.346606             0.009369   58.743121             0.013545   \n",
            "std      3.263510             0.002477    2.370564             0.003597   \n",
            "min     64.010000             0.004660   55.040000             0.006680   \n",
            "25%     66.585000             0.007345   56.682500             0.010457   \n",
            "50%     69.355000             0.009560   58.465000             0.013600   \n",
            "75%     72.302500             0.011378   60.857500             0.016403   \n",
            "max     74.940000             0.014510   62.920000             0.020860   \n",
            "\n",
            "           Mp_24h  peso_seco_final_48h      Mp_48h  \n",
            "count  330.000000           330.000000  330.000000  \n",
            "mean    40.408182             0.020961    7.718091  \n",
            "std      2.668840             0.005522    4.075068  \n",
            "min     36.000000             0.010860    1.040000  \n",
            "25%     38.045000             0.016532    4.192500  \n",
            "50%     40.410000             0.021070    7.570000  \n",
            "75%     42.652500             0.025360   11.065000  \n",
            "max     44.990000             0.032350   15.000000  \n",
            "Contagem inicial de linhas: 330, Colunas: 17\n",
            "\n",
            "--- Limpando e Processando Perda de Massa (Agua) ---\n",
            "Duplicatas removidas. Linhas antes: 330, Linhas depois: 330\n",
            "Shape final de Perda de Massa (Agua) após limpeza: (330, 17)\n",
            "NaNs em Perda de Massa (Agua) após limpeza:\n",
            "id_amostra    330\n",
            "dtype: int64\n",
            "\n",
            "--- Carregando e Inspecionando Perda de Massa (FCS): Perda_massa_FCS.csv ---\n",
            "Primeiras 5 linhas:\n",
            "  id_amostra  peso_seco_inicial  peso_seco_final_1h  Mp_1h  \\\n",
            "0        A-1             0.0262             0.00094  96.40   \n",
            "1        A-2             0.0137             0.00016  98.86   \n",
            "2        A-3             0.0303             0.00067  97.79   \n",
            "3        A-4             0.0271             0.00094  96.54   \n",
            "4        A-5             0.0182             0.00025  98.62   \n",
            "\n",
            "   peso_seco_final_2h  Mp_2h  peso_seco_final_4h  Mp_4h  peso_seco_final_8h  \\\n",
            "0             0.00323  87.66             0.00488  81.37             0.00678   \n",
            "1             0.00087  93.64             0.00226  83.53             0.00470   \n",
            "2             0.00166  94.53             0.00594  80.41             0.01058   \n",
            "3             0.00373  86.24             0.00615  77.29             0.00961   \n",
            "4             0.00270  85.19             0.00434  76.13             0.00639   \n",
            "\n",
            "   Mp_8h  peso_seco_final_16h  Mp_16h  peso_seco_final_24h  Mp_24h  \\\n",
            "0  74.13              0.01140   56.47              0.01455   44.46   \n",
            "1  65.68              0.00609   55.56              0.00768   43.94   \n",
            "2  65.08              0.01223   59.65              0.01841   39.23   \n",
            "3  64.55              0.01077   60.25              0.01550   42.81   \n",
            "4  64.88              0.00730   59.88              0.01095   39.86   \n",
            "\n",
            "   peso_seco_final_48h  Mp_48h metodo  \n",
            "0              0.02456    6.26     M1  \n",
            "1              0.01173   14.40     M2  \n",
            "2              0.02972    1.93     M3  \n",
            "3              0.02371   12.52     M4  \n",
            "4              0.01710    6.04     M5  \n",
            "\n",
            "Informações do DataFrame:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 330 entries, 0 to 329\n",
            "Data columns (total 17 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   id_amostra           330 non-null    object \n",
            " 1   peso_seco_inicial    330 non-null    float64\n",
            " 2   peso_seco_final_1h   330 non-null    float64\n",
            " 3   Mp_1h                330 non-null    float64\n",
            " 4   peso_seco_final_2h   330 non-null    float64\n",
            " 5   Mp_2h                330 non-null    float64\n",
            " 6   peso_seco_final_4h   330 non-null    float64\n",
            " 7   Mp_4h                330 non-null    float64\n",
            " 8   peso_seco_final_8h   330 non-null    float64\n",
            " 9   Mp_8h                330 non-null    float64\n",
            " 10  peso_seco_final_16h  330 non-null    float64\n",
            " 11  Mp_16h               330 non-null    float64\n",
            " 12  peso_seco_final_24h  330 non-null    float64\n",
            " 13  Mp_24h               330 non-null    float64\n",
            " 14  peso_seco_final_48h  330 non-null    float64\n",
            " 15  Mp_48h               330 non-null    float64\n",
            " 16  metodo               330 non-null    object \n",
            "dtypes: float64(15), object(2)\n",
            "memory usage: 44.0+ KB\n",
            "\n",
            "\n",
            "Estatísticas Descritivas:\n",
            "       peso_seco_inicial  peso_seco_final_1h       Mp_1h  peso_seco_final_2h  \\\n",
            "count         330.000000          330.000000  330.000000          330.000000   \n",
            "mean            0.022141            0.000572   97.417727            0.002227   \n",
            "std             0.006237            0.000248    0.838228            0.000882   \n",
            "min             0.012000            0.000160   96.000000            0.000720   \n",
            "25%             0.016700            0.000373   96.652500            0.001563   \n",
            "50%             0.021600            0.000540   97.465000            0.002060   \n",
            "75%             0.027400            0.000740   98.140000            0.002870   \n",
            "max             0.033500            0.001280   98.880000            0.004800   \n",
            "\n",
            "            Mp_2h  peso_seco_final_4h       Mp_4h  peso_seco_final_8h  \\\n",
            "count  330.000000          330.000000  330.000000          330.000000   \n",
            "mean    89.893394            0.004397   80.094758            0.006797   \n",
            "std      2.893234            0.001310    2.352865            0.002012   \n",
            "min     85.010000            0.001990   76.020000            0.003140   \n",
            "25%     87.420000            0.003340   78.070000            0.005182   \n",
            "50%     89.910000            0.004340   80.205000            0.006585   \n",
            "75%     92.247500            0.005345   82.257500            0.008352   \n",
            "max     94.990000            0.007900   83.970000            0.011700   \n",
            "\n",
            "            Mp_8h  peso_seco_final_16h      Mp_16h  peso_seco_final_24h  \\\n",
            "count  330.000000           330.000000  330.000000           330.000000   \n",
            "mean    69.248606             0.009077   58.991515             0.013205   \n",
            "std      3.179279             0.002602    2.334850             0.003789   \n",
            "min     64.030000             0.004810   55.010000             0.006980   \n",
            "25%     66.392500             0.006823   57.017500             0.009930   \n",
            "50%     69.190000             0.008945   59.070000             0.012875   \n",
            "75%     72.120000             0.011255   61.037500             0.016170   \n",
            "max     74.980000             0.014800   62.990000             0.021070   \n",
            "\n",
            "           Mp_24h  peso_seco_final_48h      Mp_48h  \n",
            "count  330.000000           330.000000  330.000000  \n",
            "mean    40.388970             0.020268    8.494909  \n",
            "std      2.497924             0.005816    4.051886  \n",
            "min     36.010000             0.010790    1.040000  \n",
            "25%     38.332500             0.015182    4.842500  \n",
            "50%     40.450000             0.019915    8.685000  \n",
            "75%     42.467500             0.024983   12.222500  \n",
            "max     44.990000             0.032470   15.000000  \n",
            "Contagem inicial de linhas: 330, Colunas: 17\n",
            "\n",
            "--- Limpando e Processando Perda de Massa (FCS) ---\n",
            "Duplicatas removidas. Linhas antes: 330, Linhas depois: 330\n",
            "Shape final de Perda de Massa (FCS) após limpeza: (330, 17)\n",
            "NaNs em Perda de Massa (FCS) após limpeza:\n",
            "id_amostra    330\n",
            "dtype: int64\n",
            "\n",
            "--- Carregando e Inspecionando Perda de Massa (SS_0.9%): perda_massa_SS_0.9%.csv ---\n",
            "Primeiras 5 linhas:\n",
            "  id_amostra  peso_seco_inicial  peso_seco_final_1h  Mp_1h  \\\n",
            "0        A-1             0.0294             0.00099  96.63   \n",
            "1        A-2             0.0120             0.00018  98.53   \n",
            "2        A-3             0.0249             0.00048  98.08   \n",
            "3        A-4             0.0325             0.00111  96.57   \n",
            "4        A-5             0.0123             0.00018  98.52   \n",
            "\n",
            "   peso_seco_final_2h  Mp_2h  peso_seco_final_4h  Mp_4h  peso_seco_final_8h  \\\n",
            "0             0.00153  94.79             0.00523  82.21             0.01002   \n",
            "1             0.00122  89.87             0.00253  78.94             0.00377   \n",
            "2             0.00361  85.49             0.00484  80.58             0.00786   \n",
            "3             0.00290  91.08             0.00723  77.75             0.00955   \n",
            "4             0.00104  91.53             0.00209  83.02             0.00424   \n",
            "\n",
            "   Mp_8h  peso_seco_final_16h  Mp_16h  peso_seco_final_24h  Mp_24h  \\\n",
            "0  65.93              0.01264   56.99              0.01849   37.12   \n",
            "1  68.55              0.00466   61.16              0.00710   40.82   \n",
            "2  68.44              0.00950   61.85              0.01478   40.64   \n",
            "3  70.62              0.01236   61.98              0.01864   42.64   \n",
            "4  65.52              0.00467   62.00              0.00779   36.63   \n",
            "\n",
            "   peso_seco_final_48h  Mp_48h metodo  \n",
            "0              0.02619   10.91     M1  \n",
            "1              0.01120    6.66     M2  \n",
            "2              0.02221   10.79     M3  \n",
            "3              0.02783   14.37     M4  \n",
            "4              0.01135    7.69     M5  \n",
            "\n",
            "Informações do DataFrame:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 330 entries, 0 to 329\n",
            "Data columns (total 17 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   id_amostra           330 non-null    object \n",
            " 1   peso_seco_inicial    330 non-null    float64\n",
            " 2   peso_seco_final_1h   330 non-null    float64\n",
            " 3   Mp_1h                330 non-null    float64\n",
            " 4   peso_seco_final_2h   330 non-null    float64\n",
            " 5   Mp_2h                330 non-null    float64\n",
            " 6   peso_seco_final_4h   330 non-null    float64\n",
            " 7   Mp_4h                330 non-null    float64\n",
            " 8   peso_seco_final_8h   330 non-null    float64\n",
            " 9   Mp_8h                330 non-null    float64\n",
            " 10  peso_seco_final_16h  330 non-null    float64\n",
            " 11  Mp_16h               330 non-null    float64\n",
            " 12  peso_seco_final_24h  330 non-null    float64\n",
            " 13  Mp_24h               330 non-null    float64\n",
            " 14  peso_seco_final_48h  330 non-null    float64\n",
            " 15  Mp_48h               330 non-null    float64\n",
            " 16  metodo               330 non-null    object \n",
            "dtypes: float64(15), object(2)\n",
            "memory usage: 44.0+ KB\n",
            "\n",
            "\n",
            "Estatísticas Descritivas:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-73-1656144624.py:53: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].mean(), inplace=True)\n",
            "/tmp/ipython-input-73-1656144624.py:53: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].mean(), inplace=True)\n",
            "/tmp/ipython-input-73-1656144624.py:53: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].mean(), inplace=True)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       peso_seco_inicial  peso_seco_final_1h       Mp_1h  peso_seco_final_2h  \\\n",
            "count         330.000000          330.000000  330.000000          330.000000   \n",
            "mean            0.022572            0.000575   97.462939            0.002259   \n",
            "std             0.005939            0.000257    0.860074            0.000925   \n",
            "min             0.011900            0.000140   96.000000            0.000680   \n",
            "25%             0.017500            0.000390   96.730000            0.001522   \n",
            "50%             0.022600            0.000525   97.470000            0.002155   \n",
            "75%             0.027575            0.000750   98.270000            0.002883   \n",
            "max             0.033400            0.001230   98.900000            0.004960   \n",
            "\n",
            "            Mp_2h  peso_seco_final_4h       Mp_4h  peso_seco_final_8h  \\\n",
            "count  330.000000          330.000000  330.000000          330.000000   \n",
            "mean    90.016455            0.004492   80.130212            0.006846   \n",
            "std      2.922718            0.001315    2.338555            0.001918   \n",
            "min     85.000000            0.002090   76.010000            0.003090   \n",
            "25%     87.595000            0.003405   78.230000            0.005375   \n",
            "50%     89.545000            0.004525   80.230000            0.006665   \n",
            "75%     92.667500            0.005375   82.217500            0.008220   \n",
            "max     94.990000            0.007950   83.970000            0.011540   \n",
            "\n",
            "            Mp_8h  peso_seco_final_16h      Mp_16h  peso_seco_final_24h  \\\n",
            "count  330.000000           330.000000  330.000000           330.000000   \n",
            "mean    69.642333             0.009229   59.114000             0.013468   \n",
            "std      3.076801             0.002481    2.312584             0.003569   \n",
            "min     64.030000             0.004580   55.020000             0.006880   \n",
            "25%     67.220000             0.007180   57.162500             0.010332   \n",
            "50%     69.665000             0.009185   59.165000             0.013515   \n",
            "75%     72.357500             0.011135   61.090000             0.016205   \n",
            "max     74.980000             0.015020   62.990000             0.021310   \n",
            "\n",
            "           Mp_24h  peso_seco_final_48h      Mp_48h  \n",
            "count  330.000000           330.000000  330.000000  \n",
            "mean    40.295758             0.020777    8.064455  \n",
            "std      2.686061             0.005623    3.985984  \n",
            "min     36.010000             0.010420    1.010000  \n",
            "25%     37.915000             0.015828    4.795000  \n",
            "50%     40.185000             0.020770    7.925000  \n",
            "75%     42.707500             0.025545   11.380000  \n",
            "max     44.960000             0.032340   15.000000  \n",
            "Contagem inicial de linhas: 330, Colunas: 17\n",
            "\n",
            "--- Limpando e Processando Perda de Massa (SS_0.9%) ---\n",
            "Duplicatas removidas. Linhas antes: 330, Linhas depois: 330\n",
            "Shape final de Perda de Massa (SS_0.9%) após limpeza: (330, 17)\n",
            "NaNs em Perda de Massa (SS_0.9%) após limpeza:\n",
            "id_amostra    330\n",
            "dtype: int64\n",
            "\n",
            "--- DataFrame de Perda de Massa Consolidado ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 990 entries, 0 to 989\n",
            "Data columns (total 18 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   id_amostra           0 non-null      float64\n",
            " 1   peso_seco_inicial    990 non-null    float64\n",
            " 2   peso_seco_final_1h   990 non-null    float64\n",
            " 3   Mp_1h                990 non-null    float64\n",
            " 4   peso_seco_final_2h   990 non-null    float64\n",
            " 5   Mp_2h                990 non-null    float64\n",
            " 6   peso_seco_final_4h   990 non-null    float64\n",
            " 7   Mp_4h                990 non-null    float64\n",
            " 8   peso_seco_final_8h   990 non-null    float64\n",
            " 9   Mp_8h                990 non-null    float64\n",
            " 10  peso_seco_final_16h  990 non-null    float64\n",
            " 11  Mp_16h               990 non-null    float64\n",
            " 12  peso_seco_final_24h  990 non-null    float64\n",
            " 13  Mp_24h               990 non-null    float64\n",
            " 14  peso_seco_final_48h  990 non-null    float64\n",
            " 15  Mp_48h               990 non-null    float64\n",
            " 16  metodo               990 non-null    object \n",
            " 17  Tipo_Liquido         990 non-null    object \n",
            "dtypes: float64(16), object(2)\n",
            "memory usage: 139.3+ KB\n",
            "None\n",
            "   id_amostra  peso_seco_inicial  peso_seco_final_1h  Mp_1h  \\\n",
            "0         NaN             0.0210             0.00068  96.78   \n",
            "1         NaN             0.0213             0.00038  98.21   \n",
            "2         NaN             0.0307             0.00080  97.39   \n",
            "3         NaN             0.0180             0.00024  98.69   \n",
            "4         NaN             0.0276             0.00072  97.38   \n",
            "\n",
            "   peso_seco_final_2h  Mp_2h  peso_seco_final_4h  Mp_4h  peso_seco_final_8h  \\\n",
            "0             0.00142  93.23             0.00488  76.77             0.00591   \n",
            "1             0.00319  85.02             0.00427  79.93             0.00629   \n",
            "2             0.00353  88.50             0.00691  77.50             0.01056   \n",
            "3             0.00111  93.85             0.00351  80.51             0.00555   \n",
            "4             0.00256  90.74             0.00525  80.97             0.00983   \n",
            "\n",
            "   Mp_8h  peso_seco_final_16h  Mp_16h  peso_seco_final_24h  Mp_24h  \\\n",
            "0  71.84              0.00942   55.12              0.01295   38.35   \n",
            "1  70.47              0.00827   61.16              0.01318   38.14   \n",
            "2  65.59              0.01178   61.62              0.01799   41.40   \n",
            "3  69.16              0.00776   56.87              0.01086   39.69   \n",
            "4  64.39              0.01205   56.33              0.01717   37.78   \n",
            "\n",
            "   peso_seco_final_48h  Mp_48h metodo Tipo_Liquido  \n",
            "0              0.01972    6.11     M1         Agua  \n",
            "1              0.01964    7.78     M2         Agua  \n",
            "2              0.02920    4.89     M3         Agua  \n",
            "3              0.01644    8.67     M4         Agua  \n",
            "4              0.02462   10.79     M5         Agua  \n",
            "NaNs em DataFrame de Perda de Massa Consolidado:\n",
            "id_amostra    990\n",
            "dtype: int64\n",
            "\n",
            "--- Carregando e Inspecionando Métodos de Obtenção: metodos_obtencao_biopolimeros.csv ---\n",
            "Primeiras 5 linhas:\n",
            "  ID_Metodo  Volume_Quitosana_ml  Concentracao_Quitosana_pct  \\\n",
            "0       M 1                36.17                        5.88   \n",
            "1       M 2                37.20                        3.01   \n",
            "2       M 3                39.54                        1.24   \n",
            "3       M 4                37.95                        3.12   \n",
            "4       M 5                37.33                        4.98   \n",
            "\n",
            "   Volume_Alginato_ml  Concentracao_Alginato_pct Adicao_Metodo  Vazao_mL_h  \\\n",
            "0               20.81                       2.03       Seringa       22.63   \n",
            "1               31.39                       0.30       Seringa       28.54   \n",
            "2               21.83                       4.43        Manual         NaN   \n",
            "3               41.23                       1.86        Manual         NaN   \n",
            "4               26.66                       1.22        Manual         NaN   \n",
            "\n",
            "   Agitacao_RPM_Inicial  Tempo_Agitacao_h_Inicial  Uso_NaOH  Volume_CaCl2_ml  \\\n",
            "0                   449                       9.9       1.0             2.40   \n",
            "1                   584                       5.9       1.0             1.19   \n",
            "2                   174                       9.4       1.0             1.71   \n",
            "3                   421                       2.6       NaN             1.27   \n",
            "4                   473                      10.1       1.0             1.72   \n",
            "\n",
            "   Agitacao_RPM_CaCl2  Tempo_Agitacao_min_CaCl2  Secagem_Temperatura_C  \\\n",
            "0                 611                        10                     45   \n",
            "1                 751                        67                     18   \n",
            "2                1399                        77                     43   \n",
            "3                1250                       149                     12   \n",
            "4                1409                        59                     54   \n",
            "\n",
            "   Secagem_Tempo_h  Imersao_Agua_Deionizada  Imersao_CaCl2  Desaereacao_Vacuo  \\\n",
            "0               49                      NaN            NaN                  1   \n",
            "1               62                      NaN            1.0                  0   \n",
            "2               45                      NaN            1.0                  1   \n",
            "3               70                      NaN            1.0                  1   \n",
            "4               61                      1.0            NaN                  0   \n",
            "\n",
            "                                Passagem_Agua_Reator  \n",
            "0                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "1                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "2  COM PASSAGEM DE ÁGUA NO REATOR A TEMPERATURA ...  \n",
            "3  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "4  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "\n",
            "Informações do DataFrame:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 66 entries, 0 to 65\n",
            "Data columns (total 19 columns):\n",
            " #   Column                      Non-Null Count  Dtype  \n",
            "---  ------                      --------------  -----  \n",
            " 0   ID_Metodo                   66 non-null     object \n",
            " 1   Volume_Quitosana_ml         66 non-null     float64\n",
            " 2   Concentracao_Quitosana_pct  66 non-null     float64\n",
            " 3   Volume_Alginato_ml          66 non-null     float64\n",
            " 4   Concentracao_Alginato_pct   66 non-null     float64\n",
            " 5   Adicao_Metodo               66 non-null     object \n",
            " 6   Vazao_mL_h                  34 non-null     float64\n",
            " 7   Agitacao_RPM_Inicial        66 non-null     int64  \n",
            " 8   Tempo_Agitacao_h_Inicial    66 non-null     float64\n",
            " 9   Uso_NaOH                    44 non-null     float64\n",
            " 10  Volume_CaCl2_ml             66 non-null     float64\n",
            " 11  Agitacao_RPM_CaCl2          66 non-null     int64  \n",
            " 12  Tempo_Agitacao_min_CaCl2    66 non-null     int64  \n",
            " 13  Secagem_Temperatura_C       66 non-null     int64  \n",
            " 14  Secagem_Tempo_h             66 non-null     int64  \n",
            " 15  Imersao_Agua_Deionizada     37 non-null     float64\n",
            " 16  Imersao_CaCl2               34 non-null     float64\n",
            " 17  Desaereacao_Vacuo           66 non-null     int64  \n",
            " 18  Passagem_Agua_Reator        66 non-null     object \n",
            "dtypes: float64(10), int64(6), object(3)\n",
            "memory usage: 9.9+ KB\n",
            "\n",
            "\n",
            "Estatísticas Descritivas:\n",
            "       Volume_Quitosana_ml  Concentracao_Quitosana_pct  Volume_Alginato_ml  \\\n",
            "count            66.000000                   66.000000           66.000000   \n",
            "mean             33.316364                    3.640303           33.005303   \n",
            "std              10.269557                    1.463263           11.231087   \n",
            "min              15.040000                    0.340000           15.280000   \n",
            "25%              24.072500                    2.622500           22.915000   \n",
            "50%              34.340000                    3.870000           31.465000   \n",
            "75%              41.302500                    4.920000           44.512500   \n",
            "max              49.940000                    5.880000           49.750000   \n",
            "\n",
            "       Concentracao_Alginato_pct  Vazao_mL_h  Agitacao_RPM_Inicial  \\\n",
            "count                  66.000000   34.000000             66.000000   \n",
            "mean                    3.029242   37.320588            350.681818   \n",
            "std                     1.612646   11.900975            153.247729   \n",
            "min                     0.280000   18.180000            100.000000   \n",
            "25%                     1.867500   25.655000            204.750000   \n",
            "50%                     3.260000   38.940000            345.000000   \n",
            "75%                     4.312500   47.785000            481.500000   \n",
            "max                     5.720000   54.950000            597.000000   \n",
            "\n",
            "       Tempo_Agitacao_h_Inicial  Uso_NaOH  Volume_CaCl2_ml  \\\n",
            "count                 66.000000      44.0        66.000000   \n",
            "mean                   6.646970       1.0         1.791212   \n",
            "std                    2.938928       0.0         0.742560   \n",
            "min                    1.000000       1.0         0.550000   \n",
            "25%                    4.200000       1.0         1.240000   \n",
            "50%                    6.700000       1.0         1.725000   \n",
            "75%                    9.250000       1.0         2.270000   \n",
            "max                   11.900000       1.0         3.410000   \n",
            "\n",
            "       Agitacao_RPM_CaCl2  Tempo_Agitacao_min_CaCl2  Secagem_Temperatura_C  \\\n",
            "count           66.000000                 66.000000              66.000000   \n",
            "mean           849.318182                 79.863636              38.424242   \n",
            "std            467.656914                 41.110690              16.721300   \n",
            "min            113.000000                 10.000000              10.000000   \n",
            "25%            488.750000                 45.500000              24.750000   \n",
            "50%            823.500000                 76.500000              37.500000   \n",
            "75%           1236.750000                113.000000              50.750000   \n",
            "max           1696.000000                158.000000              71.000000   \n",
            "\n",
            "       Secagem_Tempo_h  Imersao_Agua_Deionizada  Imersao_CaCl2  \\\n",
            "count        66.000000                     37.0           34.0   \n",
            "mean         48.439394                      1.0            1.0   \n",
            "std          14.266830                      0.0            0.0   \n",
            "min          24.000000                      1.0            1.0   \n",
            "25%          35.000000                      1.0            1.0   \n",
            "50%          51.000000                      1.0            1.0   \n",
            "75%          61.750000                      1.0            1.0   \n",
            "max          70.000000                      1.0            1.0   \n",
            "\n",
            "       Desaereacao_Vacuo  \n",
            "count          66.000000  \n",
            "mean            0.484848  \n",
            "std             0.503600  \n",
            "min             0.000000  \n",
            "25%             0.000000  \n",
            "50%             0.000000  \n",
            "75%             1.000000  \n",
            "max             1.000000  \n",
            "Contagem inicial de linhas: 66, Colunas: 19\n",
            "\n",
            "--- Limpando e Processando Métodos de Obtenção ---\n",
            "Duplicatas removidas. Linhas antes: 66, Linhas depois: 66\n",
            "NaNs na coluna numérica 'Vazao_mL_h' preenchidos com a média.\n",
            "NaNs na coluna numérica 'Uso_NaOH' preenchidos com a média.\n",
            "NaNs na coluna numérica 'Imersao_Agua_Deionizada' preenchidos com a média.\n",
            "NaNs na coluna numérica 'Imersao_CaCl2' preenchidos com a média.\n",
            "Shape final de Métodos de Obtenção após limpeza: (66, 19)\n",
            "NaNs em Métodos de Obtenção após limpeza:\n",
            "Series([], dtype: int64)\n",
            "NaNs em df_metodos após limpeza:\n",
            "Series([], dtype: int64)\n",
            "\n",
            "--- Transformando para formato longo: Massa_Umida_Final_Unificado ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6930 entries, 0 to 6929\n",
            "Data columns (total 6 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   id_amostra                   0 non-null      float64\n",
            " 1   massa_seca_inicial           6930 non-null   float64\n",
            " 2   Tipo_Liquido                 6930 non-null   object \n",
            " 3   metodo                       6930 non-null   object \n",
            " 4   Massa_Umida_Final_Unificado  6930 non-null   float64\n",
            " 5   Tempo_h                      6930 non-null   float64\n",
            "dtypes: float64(4), object(2)\n",
            "memory usage: 325.0+ KB\n",
            "None\n",
            "   id_amostra  massa_seca_inicial Tipo_Liquido metodo  \\\n",
            "0         NaN              0.0197          FCS     M1   \n",
            "1         NaN              0.0170          FCS     M2   \n",
            "2         NaN              0.0226          FCS     M3   \n",
            "3         NaN              0.0200          FCS     M4   \n",
            "4         NaN              0.0140          FCS     M5   \n",
            "\n",
            "   Massa_Umida_Final_Unificado  Tempo_h  \n",
            "0                      0.00378      1.0  \n",
            "1                      0.00458      1.0  \n",
            "2                      0.00526      1.0  \n",
            "3                      0.00147      1.0  \n",
            "4                      0.00436      1.0  \n",
            "NaNs em df_long (Massa_Umida_Final_Unificado) após transformação para formato longo:\n",
            "id_amostra    6930\n",
            "dtype: int64\n",
            "\n",
            "--- Transformando para formato longo: CW_gg_Unificado ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6930 entries, 0 to 6929\n",
            "Data columns (total 6 columns):\n",
            " #   Column              Non-Null Count  Dtype  \n",
            "---  ------              --------------  -----  \n",
            " 0   id_amostra          0 non-null      float64\n",
            " 1   massa_seca_inicial  6930 non-null   float64\n",
            " 2   Tipo_Liquido        6930 non-null   object \n",
            " 3   metodo              6930 non-null   object \n",
            " 4   CW_gg_Unificado     6930 non-null   float64\n",
            " 5   Tempo_h             6930 non-null   float64\n",
            "dtypes: float64(4), object(2)\n",
            "memory usage: 325.0+ KB\n",
            "None\n",
            "   id_amostra  massa_seca_inicial Tipo_Liquido metodo  CW_gg_Unificado  \\\n",
            "0         NaN              0.0197          FCS     M1              0.0   \n",
            "1         NaN              0.0170          FCS     M2              0.0   \n",
            "2         NaN              0.0226          FCS     M3              0.0   \n",
            "3         NaN              0.0200          FCS     M4              0.0   \n",
            "4         NaN              0.0140          FCS     M5              0.0   \n",
            "\n",
            "   Tempo_h  \n",
            "0      1.0  \n",
            "1      1.0  \n",
            "2      1.0  \n",
            "3      1.0  \n",
            "4      1.0  \n",
            "NaNs em df_long (CW_gg_Unificado) após transformação para formato longo:\n",
            "id_amostra    6930\n",
            "dtype: int64\n",
            "\n",
            "--- DataFrame de Absorção Final (Formato Longo) ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7084 entries, 0 to 7083\n",
            "Data columns (total 7 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   id_amostra                   0 non-null      float64\n",
            " 1   massa_seca_inicial           7084 non-null   float64\n",
            " 2   Tipo_Liquido                 7084 non-null   object \n",
            " 3   metodo                       7084 non-null   object \n",
            " 4   Massa_Umida_Final_Unificado  7084 non-null   float64\n",
            " 5   Tempo_h                      7084 non-null   float64\n",
            " 6   CW_gg_Unificado              7084 non-null   float64\n",
            "dtypes: float64(5), object(2)\n",
            "memory usage: 387.5+ KB\n",
            "None\n",
            "   id_amostra  massa_seca_inicial Tipo_Liquido metodo  \\\n",
            "0         NaN              0.0197          FCS     M1   \n",
            "1         NaN              0.0170          FCS     M2   \n",
            "2         NaN              0.0226          FCS     M3   \n",
            "3         NaN              0.0200          FCS     M4   \n",
            "4         NaN              0.0140          FCS     M5   \n",
            "\n",
            "   Massa_Umida_Final_Unificado  Tempo_h  CW_gg_Unificado  \n",
            "0                      0.00378      1.0              0.0  \n",
            "1                      0.00458      1.0              0.0  \n",
            "2                      0.00526      1.0              0.0  \n",
            "3                      0.00147      1.0              0.0  \n",
            "4                      0.00436      1.0              0.0  \n",
            "NaNs em df_absorcao_final após transformação para formato longo:\n",
            "id_amostra    7084\n",
            "dtype: int64\n",
            "\n",
            "--- Transformando para formato longo: Peso_Seco_Final_Unificado ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-73-1656144624.py:24: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].mean(), inplace=True)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6930 entries, 0 to 6929\n",
            "Data columns (total 6 columns):\n",
            " #   Column                     Non-Null Count  Dtype  \n",
            "---  ------                     --------------  -----  \n",
            " 0   id_amostra                 0 non-null      float64\n",
            " 1   peso_seco_inicial          6930 non-null   float64\n",
            " 2   Tipo_Liquido               6930 non-null   object \n",
            " 3   metodo                     6930 non-null   object \n",
            " 4   Peso_Seco_Final_Unificado  6930 non-null   float64\n",
            " 5   Tempo_h                    6930 non-null   float64\n",
            "dtypes: float64(4), object(2)\n",
            "memory usage: 325.0+ KB\n",
            "None\n",
            "   id_amostra  peso_seco_inicial Tipo_Liquido metodo  \\\n",
            "0         NaN             0.0210         Agua     M1   \n",
            "1         NaN             0.0213         Agua     M2   \n",
            "2         NaN             0.0307         Agua     M3   \n",
            "3         NaN             0.0180         Agua     M4   \n",
            "4         NaN             0.0276         Agua     M5   \n",
            "\n",
            "   Peso_Seco_Final_Unificado  Tempo_h  \n",
            "0                    0.00068      1.0  \n",
            "1                    0.00038      1.0  \n",
            "2                    0.00080      1.0  \n",
            "3                    0.00024      1.0  \n",
            "4                    0.00072      1.0  \n",
            "NaNs em df_long (Peso_Seco_Final_Unificado) após transformação para formato longo:\n",
            "id_amostra    6930\n",
            "dtype: int64\n",
            "\n",
            "--- Transformando para formato longo: Mp_Percentual_Unificado ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6930 entries, 0 to 6929\n",
            "Data columns (total 6 columns):\n",
            " #   Column                   Non-Null Count  Dtype  \n",
            "---  ------                   --------------  -----  \n",
            " 0   id_amostra               0 non-null      float64\n",
            " 1   peso_seco_inicial        6930 non-null   float64\n",
            " 2   Tipo_Liquido             6930 non-null   object \n",
            " 3   metodo                   6930 non-null   object \n",
            " 4   Mp_Percentual_Unificado  6930 non-null   float64\n",
            " 5   Tempo_h                  6930 non-null   float64\n",
            "dtypes: float64(4), object(2)\n",
            "memory usage: 325.0+ KB\n",
            "None\n",
            "   id_amostra  peso_seco_inicial Tipo_Liquido metodo  Mp_Percentual_Unificado  \\\n",
            "0         NaN             0.0210         Agua     M1                    96.78   \n",
            "1         NaN             0.0213         Agua     M2                    98.21   \n",
            "2         NaN             0.0307         Agua     M3                    97.39   \n",
            "3         NaN             0.0180         Agua     M4                    98.69   \n",
            "4         NaN             0.0276         Agua     M5                    97.38   \n",
            "\n",
            "   Tempo_h  \n",
            "0      1.0  \n",
            "1      1.0  \n",
            "2      1.0  \n",
            "3      1.0  \n",
            "4      1.0  \n",
            "NaNs em df_long (Mp_Percentual_Unificado) após transformação para formato longo:\n",
            "id_amostra    6930\n",
            "dtype: int64\n",
            "\n",
            "--- DataFrame de Perda de Massa Final (Formato Longo) ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7028 entries, 0 to 7027\n",
            "Data columns (total 7 columns):\n",
            " #   Column                     Non-Null Count  Dtype  \n",
            "---  ------                     --------------  -----  \n",
            " 0   id_amostra                 0 non-null      float64\n",
            " 1   peso_seco_inicial          7028 non-null   float64\n",
            " 2   Tipo_Liquido               7028 non-null   object \n",
            " 3   metodo                     7028 non-null   object \n",
            " 4   Peso_Seco_Final_Unificado  7028 non-null   float64\n",
            " 5   Tempo_h                    7028 non-null   float64\n",
            " 6   Mp_Percentual_Unificado    7028 non-null   float64\n",
            "dtypes: float64(5), object(2)\n",
            "memory usage: 384.5+ KB\n",
            "None\n",
            "   id_amostra  peso_seco_inicial Tipo_Liquido metodo  \\\n",
            "0         NaN             0.0210         Agua     M1   \n",
            "1         NaN             0.0213         Agua     M2   \n",
            "2         NaN             0.0307         Agua     M3   \n",
            "3         NaN             0.0180         Agua     M4   \n",
            "4         NaN             0.0276         Agua     M5   \n",
            "\n",
            "   Peso_Seco_Final_Unificado  Tempo_h  Mp_Percentual_Unificado  \n",
            "0                    0.00068      1.0                    96.78  \n",
            "1                    0.00038      1.0                    98.21  \n",
            "2                    0.00080      1.0                    97.39  \n",
            "3                    0.00024      1.0                    98.69  \n",
            "4                    0.00072      1.0                    97.38  \n",
            "NaNs em df_perda_final após transformação para formato longo:\n",
            "id_amostra    7028\n",
            "dtype: int64\n",
            "\n",
            "--- Integrando dados com métodos de obtenção ---\n",
            "Unique values in df_main['metodo']: ['M1' 'M2' 'M3' 'M4' 'M5' 'M6' 'M7' 'M8' 'M9' 'M10' 'M11' 'M12' 'M13'\n",
            " 'M14' 'M15' 'M16' 'M17' 'M18' 'M19' 'M20' 'M21' 'M22' 'M23' 'M24' 'M25'\n",
            " 'M26' 'M27' 'M28' 'M29' 'M30' 'M31' 'M32' 'M33' 'M34' 'M35' 'M36' 'M37'\n",
            " 'M38' 'M39' 'M40' 'M41' 'M42' 'M43' 'M44' 'M45' 'M46' 'M47' 'M48' 'M49'\n",
            " 'M50' 'M51' 'M52' 'M53' 'M54' 'M55' 'M56' 'M57' 'M58' 'M59' 'M60' 'M61'\n",
            " 'M62' 'M63' 'M64' 'M65' 'M66']\n",
            "Unique values in df_methods['ID_Metodo']: ['M1' 'M2' 'M3' 'M4' 'M5' 'M6' 'M7' 'M8' 'M9' 'M10' 'M11' 'M12' 'M13'\n",
            " 'M14' 'M15' 'M16' 'M17' 'M18' 'M19' 'M20' 'M21' 'M22' 'M23' 'M24' 'M25'\n",
            " 'M26' 'M27' 'M28' 'M29' 'M30' 'M31' 'M32' 'M33' 'M34' 'M35' 'M36' 'M37'\n",
            " 'M38' 'M39' 'M40' 'M41' 'M42' 'M43' 'M44' 'M45' 'M46' 'M47' 'M48' 'M49'\n",
            " 'M50' 'M51' 'M52' 'M53' 'M54' 'M55' 'M56' 'M57' 'M58' 'M59' 'M60' 'M61'\n",
            " 'M62' 'M63' 'M64' 'M65' 'M66']\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7084 entries, 0 to 7083\n",
            "Data columns (total 26 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   id_amostra                   0 non-null      float64\n",
            " 1   massa_seca_inicial           7084 non-null   float64\n",
            " 2   Tipo_Liquido                 7084 non-null   object \n",
            " 3   metodo                       7084 non-null   object \n",
            " 4   Massa_Umida_Final_Unificado  7084 non-null   float64\n",
            " 5   Tempo_h                      7084 non-null   float64\n",
            " 6   CW_gg_Unificado              7084 non-null   float64\n",
            " 7   ID_Metodo                    7084 non-null   object \n",
            " 8   Volume_Quitosana_ml          7084 non-null   float64\n",
            " 9   Concentracao_Quitosana_pct   7084 non-null   float64\n",
            " 10  Volume_Alginato_ml           7084 non-null   float64\n",
            " 11  Concentracao_Alginato_pct    7084 non-null   float64\n",
            " 12  Adicao_Metodo                7084 non-null   object \n",
            " 13  Vazao_mL_h                   7084 non-null   float64\n",
            " 14  Agitacao_RPM_Inicial         7084 non-null   int64  \n",
            " 15  Tempo_Agitacao_h_Inicial     7084 non-null   float64\n",
            " 16  Uso_NaOH                     7084 non-null   float64\n",
            " 17  Volume_CaCl2_ml              7084 non-null   float64\n",
            " 18  Agitacao_RPM_CaCl2           7084 non-null   int64  \n",
            " 19  Tempo_Agitacao_min_CaCl2     7084 non-null   int64  \n",
            " 20  Secagem_Temperatura_C        7084 non-null   int64  \n",
            " 21  Secagem_Tempo_h              7084 non-null   int64  \n",
            " 22  Imersao_Agua_Deionizada      7084 non-null   float64\n",
            " 23  Imersao_CaCl2                7084 non-null   float64\n",
            " 24  Desaereacao_Vacuo            7084 non-null   int64  \n",
            " 25  Passagem_Agua_Reator         7084 non-null   object \n",
            "dtypes: float64(15), int64(6), object(5)\n",
            "memory usage: 1.4+ MB\n",
            "None\n",
            "   id_amostra  massa_seca_inicial Tipo_Liquido metodo  \\\n",
            "0         NaN              0.0197          FCS     M1   \n",
            "1         NaN              0.0170          FCS     M2   \n",
            "2         NaN              0.0226          FCS     M3   \n",
            "3         NaN              0.0200          FCS     M4   \n",
            "4         NaN              0.0140          FCS     M5   \n",
            "\n",
            "   Massa_Umida_Final_Unificado  Tempo_h  CW_gg_Unificado ID_Metodo  \\\n",
            "0                      0.00378      1.0              0.0        M1   \n",
            "1                      0.00458      1.0              0.0        M2   \n",
            "2                      0.00526      1.0              0.0        M3   \n",
            "3                      0.00147      1.0              0.0        M4   \n",
            "4                      0.00436      1.0              0.0        M5   \n",
            "\n",
            "   Volume_Quitosana_ml  Concentracao_Quitosana_pct  ...  Uso_NaOH  \\\n",
            "0                36.17                        5.88  ...       1.0   \n",
            "1                37.20                        3.01  ...       1.0   \n",
            "2                39.54                        1.24  ...       1.0   \n",
            "3                37.95                        3.12  ...       1.0   \n",
            "4                37.33                        4.98  ...       1.0   \n",
            "\n",
            "   Volume_CaCl2_ml Agitacao_RPM_CaCl2  Tempo_Agitacao_min_CaCl2  \\\n",
            "0             2.40                611                        10   \n",
            "1             1.19                751                        67   \n",
            "2             1.71               1399                        77   \n",
            "3             1.27               1250                       149   \n",
            "4             1.72               1409                        59   \n",
            "\n",
            "   Secagem_Temperatura_C  Secagem_Tempo_h  Imersao_Agua_Deionizada  \\\n",
            "0                     45               49                      1.0   \n",
            "1                     18               62                      1.0   \n",
            "2                     43               45                      1.0   \n",
            "3                     12               70                      1.0   \n",
            "4                     54               61                      1.0   \n",
            "\n",
            "   Imersao_CaCl2  Desaereacao_Vacuo  \\\n",
            "0            1.0                  1   \n",
            "1            1.0                  0   \n",
            "2            1.0                  1   \n",
            "3            1.0                  1   \n",
            "4            1.0                  0   \n",
            "\n",
            "                                Passagem_Agua_Reator  \n",
            "0                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "1                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "2  COM PASSAGEM DE ÁGUA NO REATOR A TEMPERATURA ...  \n",
            "3  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "4  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "\n",
            "[5 rows x 26 columns]\n",
            "NaNs em df_integrated após merge:\n",
            "id_amostra    7084\n",
            "dtype: int64\n",
            "\n",
            "--- Integrando dados com métodos de obtenção ---\n",
            "Unique values in df_main['metodo']: ['M1' 'M2' 'M3' 'M4' 'M5' 'M6' 'M7' 'M8' 'M9' 'M10' 'M11' 'M12' 'M13'\n",
            " 'M14' 'M15' 'M16' 'M17' 'M18' 'M19' 'M20' 'M21' 'M22' 'M23' 'M24' 'M25'\n",
            " 'M26' 'M27' 'M28' 'M29' 'M30' 'M31' 'M32' 'M33' 'M34' 'M35' 'M36' 'M37'\n",
            " 'M38' 'M39' 'M40' 'M41' 'M42' 'M43' 'M44' 'M45' 'M46' 'M47' 'M48' 'M49'\n",
            " 'M50' 'M51' 'M52' 'M53' 'M54' 'M55' 'M56' 'M57' 'M58' 'M59' 'M60' 'M61'\n",
            " 'M62' 'M63' 'M64' 'M65' 'M66']\n",
            "Unique values in df_methods['ID_Metodo']: ['M1' 'M2' 'M3' 'M4' 'M5' 'M6' 'M7' 'M8' 'M9' 'M10' 'M11' 'M12' 'M13'\n",
            " 'M14' 'M15' 'M16' 'M17' 'M18' 'M19' 'M20' 'M21' 'M22' 'M23' 'M24' 'M25'\n",
            " 'M26' 'M27' 'M28' 'M29' 'M30' 'M31' 'M32' 'M33' 'M34' 'M35' 'M36' 'M37'\n",
            " 'M38' 'M39' 'M40' 'M41' 'M42' 'M43' 'M44' 'M45' 'M46' 'M47' 'M48' 'M49'\n",
            " 'M50' 'M51' 'M52' 'M53' 'M54' 'M55' 'M56' 'M57' 'M58' 'M59' 'M60' 'M61'\n",
            " 'M62' 'M63' 'M64' 'M65' 'M66']\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7028 entries, 0 to 7027\n",
            "Data columns (total 26 columns):\n",
            " #   Column                      Non-Null Count  Dtype  \n",
            "---  ------                      --------------  -----  \n",
            " 0   id_amostra                  0 non-null      float64\n",
            " 1   peso_seco_inicial           7028 non-null   float64\n",
            " 2   Tipo_Liquido                7028 non-null   object \n",
            " 3   metodo                      7028 non-null   object \n",
            " 4   Peso_Seco_Final_Unificado   7028 non-null   float64\n",
            " 5   Tempo_h                     7028 non-null   float64\n",
            " 6   Mp_Percentual_Unificado     7028 non-null   float64\n",
            " 7   ID_Metodo                   7028 non-null   object \n",
            " 8   Volume_Quitosana_ml         7028 non-null   float64\n",
            " 9   Concentracao_Quitosana_pct  7028 non-null   float64\n",
            " 10  Volume_Alginato_ml          7028 non-null   float64\n",
            " 11  Concentracao_Alginato_pct   7028 non-null   float64\n",
            " 12  Adicao_Metodo               7028 non-null   object \n",
            " 13  Vazao_mL_h                  7028 non-null   float64\n",
            " 14  Agitacao_RPM_Inicial        7028 non-null   int64  \n",
            " 15  Tempo_Agitacao_h_Inicial    7028 non-null   float64\n",
            " 16  Uso_NaOH                    7028 non-null   float64\n",
            " 17  Volume_CaCl2_ml             7028 non-null   float64\n",
            " 18  Agitacao_RPM_CaCl2          7028 non-null   int64  \n",
            " 19  Tempo_Agitacao_min_CaCl2    7028 non-null   int64  \n",
            " 20  Secagem_Temperatura_C       7028 non-null   int64  \n",
            " 21  Secagem_Tempo_h             7028 non-null   int64  \n",
            " 22  Imersao_Agua_Deionizada     7028 non-null   float64\n",
            " 23  Imersao_CaCl2               7028 non-null   float64\n",
            " 24  Desaereacao_Vacuo           7028 non-null   int64  \n",
            " 25  Passagem_Agua_Reator        7028 non-null   object \n",
            "dtypes: float64(15), int64(6), object(5)\n",
            "memory usage: 1.4+ MB\n",
            "None\n",
            "   id_amostra  peso_seco_inicial Tipo_Liquido metodo  \\\n",
            "0         NaN             0.0210         Agua     M1   \n",
            "1         NaN             0.0213         Agua     M2   \n",
            "2         NaN             0.0307         Agua     M3   \n",
            "3         NaN             0.0180         Agua     M4   \n",
            "4         NaN             0.0276         Agua     M5   \n",
            "\n",
            "   Peso_Seco_Final_Unificado  Tempo_h  Mp_Percentual_Unificado ID_Metodo  \\\n",
            "0                    0.00068      1.0                    96.78        M1   \n",
            "1                    0.00038      1.0                    98.21        M2   \n",
            "2                    0.00080      1.0                    97.39        M3   \n",
            "3                    0.00024      1.0                    98.69        M4   \n",
            "4                    0.00072      1.0                    97.38        M5   \n",
            "\n",
            "   Volume_Quitosana_ml  Concentracao_Quitosana_pct  ...  Uso_NaOH  \\\n",
            "0                36.17                        5.88  ...       1.0   \n",
            "1                37.20                        3.01  ...       1.0   \n",
            "2                39.54                        1.24  ...       1.0   \n",
            "3                37.95                        3.12  ...       1.0   \n",
            "4                37.33                        4.98  ...       1.0   \n",
            "\n",
            "   Volume_CaCl2_ml Agitacao_RPM_CaCl2  Tempo_Agitacao_min_CaCl2  \\\n",
            "0             2.40                611                        10   \n",
            "1             1.19                751                        67   \n",
            "2             1.71               1399                        77   \n",
            "3             1.27               1250                       149   \n",
            "4             1.72               1409                        59   \n",
            "\n",
            "   Secagem_Temperatura_C  Secagem_Tempo_h  Imersao_Agua_Deionizada  \\\n",
            "0                     45               49                      1.0   \n",
            "1                     18               62                      1.0   \n",
            "2                     43               45                      1.0   \n",
            "3                     12               70                      1.0   \n",
            "4                     54               61                      1.0   \n",
            "\n",
            "   Imersao_CaCl2  Desaereacao_Vacuo  \\\n",
            "0            1.0                  1   \n",
            "1            1.0                  0   \n",
            "2            1.0                  1   \n",
            "3            1.0                  1   \n",
            "4            1.0                  0   \n",
            "\n",
            "                                Passagem_Agua_Reator  \n",
            "0                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "1                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "2  COM PASSAGEM DE ÁGUA NO REATOR A TEMPERATURA ...  \n",
            "3  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "4  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "\n",
            "[5 rows x 26 columns]\n",
            "NaNs em df_integrated após merge:\n",
            "id_amostra    7028\n",
            "dtype: int64\n",
            "\n",
            "--- DataFrames Finais Integrados ---\n",
            "Absorção Integrado:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7084 entries, 0 to 7083\n",
            "Data columns (total 26 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   id_amostra                   0 non-null      float64\n",
            " 1   massa_seca_inicial           7084 non-null   float64\n",
            " 2   Tipo_Liquido                 7084 non-null   object \n",
            " 3   metodo                       7084 non-null   object \n",
            " 4   Massa_Umida_Final_Unificado  7084 non-null   float64\n",
            " 5   Tempo_h                      7084 non-null   float64\n",
            " 6   CW_gg_Unificado              7084 non-null   float64\n",
            " 7   ID_Metodo                    7084 non-null   object \n",
            " 8   Volume_Quitosana_ml          7084 non-null   float64\n",
            " 9   Concentracao_Quitosana_pct   7084 non-null   float64\n",
            " 10  Volume_Alginato_ml           7084 non-null   float64\n",
            " 11  Concentracao_Alginato_pct    7084 non-null   float64\n",
            " 12  Adicao_Metodo                7084 non-null   object \n",
            " 13  Vazao_mL_h                   7084 non-null   float64\n",
            " 14  Agitacao_RPM_Inicial         7084 non-null   int64  \n",
            " 15  Tempo_Agitacao_h_Inicial     7084 non-null   float64\n",
            " 16  Uso_NaOH                     7084 non-null   float64\n",
            " 17  Volume_CaCl2_ml              7084 non-null   float64\n",
            " 18  Agitacao_RPM_CaCl2           7084 non-null   int64  \n",
            " 19  Tempo_Agitacao_min_CaCl2     7084 non-null   int64  \n",
            " 20  Secagem_Temperatura_C        7084 non-null   int64  \n",
            " 21  Secagem_Tempo_h              7084 non-null   int64  \n",
            " 22  Imersao_Agua_Deionizada      7084 non-null   float64\n",
            " 23  Imersao_CaCl2                7084 non-null   float64\n",
            " 24  Desaereacao_Vacuo            7084 non-null   int64  \n",
            " 25  Passagem_Agua_Reator         7084 non-null   object \n",
            "dtypes: float64(15), int64(6), object(5)\n",
            "memory usage: 1.4+ MB\n",
            "None\n",
            "   id_amostra  massa_seca_inicial Tipo_Liquido metodo  \\\n",
            "0         NaN              0.0197          FCS     M1   \n",
            "1         NaN              0.0170          FCS     M2   \n",
            "2         NaN              0.0226          FCS     M3   \n",
            "3         NaN              0.0200          FCS     M4   \n",
            "4         NaN              0.0140          FCS     M5   \n",
            "\n",
            "   Massa_Umida_Final_Unificado  Tempo_h  CW_gg_Unificado ID_Metodo  \\\n",
            "0                      0.00378      1.0              0.0        M1   \n",
            "1                      0.00458      1.0              0.0        M2   \n",
            "2                      0.00526      1.0              0.0        M3   \n",
            "3                      0.00147      1.0              0.0        M4   \n",
            "4                      0.00436      1.0              0.0        M5   \n",
            "\n",
            "   Volume_Quitosana_ml  Concentracao_Quitosana_pct  ...  Uso_NaOH  \\\n",
            "0                36.17                        5.88  ...       1.0   \n",
            "1                37.20                        3.01  ...       1.0   \n",
            "2                39.54                        1.24  ...       1.0   \n",
            "3                37.95                        3.12  ...       1.0   \n",
            "4                37.33                        4.98  ...       1.0   \n",
            "\n",
            "   Volume_CaCl2_ml Agitacao_RPM_CaCl2  Tempo_Agitacao_min_CaCl2  \\\n",
            "0             2.40                611                        10   \n",
            "1             1.19                751                        67   \n",
            "2             1.71               1399                        77   \n",
            "3             1.27               1250                       149   \n",
            "4             1.72               1409                        59   \n",
            "\n",
            "   Secagem_Temperatura_C  Secagem_Tempo_h  Imersao_Agua_Deionizada  \\\n",
            "0                     45               49                      1.0   \n",
            "1                     18               62                      1.0   \n",
            "2                     43               45                      1.0   \n",
            "3                     12               70                      1.0   \n",
            "4                     54               61                      1.0   \n",
            "\n",
            "   Imersao_CaCl2  Desaereacao_Vacuo  \\\n",
            "0            1.0                  1   \n",
            "1            1.0                  0   \n",
            "2            1.0                  1   \n",
            "3            1.0                  1   \n",
            "4            1.0                  0   \n",
            "\n",
            "                                Passagem_Agua_Reator  \n",
            "0                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "1                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "2  COM PASSAGEM DE ÁGUA NO REATOR A TEMPERATURA ...  \n",
            "3  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "4  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "\n",
            "[5 rows x 26 columns]\n",
            "NaNs em df_absorcao_integrado após integração:\n",
            "id_amostra    7084\n",
            "dtype: int64\n",
            "\n",
            "Perda de Massa Integrado:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7028 entries, 0 to 7027\n",
            "Data columns (total 26 columns):\n",
            " #   Column                      Non-Null Count  Dtype  \n",
            "---  ------                      --------------  -----  \n",
            " 0   id_amostra                  0 non-null      float64\n",
            " 1   peso_seco_inicial           7028 non-null   float64\n",
            " 2   Tipo_Liquido                7028 non-null   object \n",
            " 3   metodo                      7028 non-null   object \n",
            " 4   Peso_Seco_Final_Unificado   7028 non-null   float64\n",
            " 5   Tempo_h                     7028 non-null   float64\n",
            " 6   Mp_Percentual_Unificado     7028 non-null   float64\n",
            " 7   ID_Metodo                   7028 non-null   object \n",
            " 8   Volume_Quitosana_ml         7028 non-null   float64\n",
            " 9   Concentracao_Quitosana_pct  7028 non-null   float64\n",
            " 10  Volume_Alginato_ml          7028 non-null   float64\n",
            " 11  Concentracao_Alginato_pct   7028 non-null   float64\n",
            " 12  Adicao_Metodo               7028 non-null   object \n",
            " 13  Vazao_mL_h                  7028 non-null   float64\n",
            " 14  Agitacao_RPM_Inicial        7028 non-null   int64  \n",
            " 15  Tempo_Agitacao_h_Inicial    7028 non-null   float64\n",
            " 16  Uso_NaOH                    7028 non-null   float64\n",
            " 17  Volume_CaCl2_ml             7028 non-null   float64\n",
            " 18  Agitacao_RPM_CaCl2          7028 non-null   int64  \n",
            " 19  Tempo_Agitacao_min_CaCl2    7028 non-null   int64  \n",
            " 20  Secagem_Temperatura_C       7028 non-null   int64  \n",
            " 21  Secagem_Tempo_h             7028 non-null   int64  \n",
            " 22  Imersao_Agua_Deionizada     7028 non-null   float64\n",
            " 23  Imersao_CaCl2               7028 non-null   float64\n",
            " 24  Desaereacao_Vacuo           7028 non-null   int64  \n",
            " 25  Passagem_Agua_Reator        7028 non-null   object \n",
            "dtypes: float64(15), int64(6), object(5)\n",
            "memory usage: 1.4+ MB\n",
            "None\n",
            "   id_amostra  peso_seco_inicial Tipo_Liquido metodo  \\\n",
            "0         NaN             0.0210         Agua     M1   \n",
            "1         NaN             0.0213         Agua     M2   \n",
            "2         NaN             0.0307         Agua     M3   \n",
            "3         NaN             0.0180         Agua     M4   \n",
            "4         NaN             0.0276         Agua     M5   \n",
            "\n",
            "   Peso_Seco_Final_Unificado  Tempo_h  Mp_Percentual_Unificado ID_Metodo  \\\n",
            "0                    0.00068      1.0                    96.78        M1   \n",
            "1                    0.00038      1.0                    98.21        M2   \n",
            "2                    0.00080      1.0                    97.39        M3   \n",
            "3                    0.00024      1.0                    98.69        M4   \n",
            "4                    0.00072      1.0                    97.38        M5   \n",
            "\n",
            "   Volume_Quitosana_ml  Concentracao_Quitosana_pct  ...  Uso_NaOH  \\\n",
            "0                36.17                        5.88  ...       1.0   \n",
            "1                37.20                        3.01  ...       1.0   \n",
            "2                39.54                        1.24  ...       1.0   \n",
            "3                37.95                        3.12  ...       1.0   \n",
            "4                37.33                        4.98  ...       1.0   \n",
            "\n",
            "   Volume_CaCl2_ml Agitacao_RPM_CaCl2  Tempo_Agitacao_min_CaCl2  \\\n",
            "0             2.40                611                        10   \n",
            "1             1.19                751                        67   \n",
            "2             1.71               1399                        77   \n",
            "3             1.27               1250                       149   \n",
            "4             1.72               1409                        59   \n",
            "\n",
            "   Secagem_Temperatura_C  Secagem_Tempo_h  Imersao_Agua_Deionizada  \\\n",
            "0                     45               49                      1.0   \n",
            "1                     18               62                      1.0   \n",
            "2                     43               45                      1.0   \n",
            "3                     12               70                      1.0   \n",
            "4                     54               61                      1.0   \n",
            "\n",
            "   Imersao_CaCl2  Desaereacao_Vacuo  \\\n",
            "0            1.0                  1   \n",
            "1            1.0                  0   \n",
            "2            1.0                  1   \n",
            "3            1.0                  1   \n",
            "4            1.0                  0   \n",
            "\n",
            "                                Passagem_Agua_Reator  \n",
            "0                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "1                    SEM PASSAGEM DE ÁGUA NO REATOR  \n",
            "2  COM PASSAGEM DE ÁGUA NO REATOR A TEMPERATURA ...  \n",
            "3  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "4  COM PASAGEM DE ÁGUA NO REATOR A 25°C COM AUXÁ...  \n",
            "\n",
            "[5 rows x 26 columns]\n",
            "NaNs em df_perda_integrado após integração:\n",
            "id_amostra    7028\n",
            "dtype: int64\n",
            "\n",
            "Shape de df_absorcao_integrado antes da modelagem: (7084, 26)\n",
            "Shape de df_perda_integrado antes da modelagem: (7028, 26)\n",
            "\n",
            "--- Realizando Análise Exploratória de Dados (EDA) ---\n",
            "\n",
            "1. Distribuição das variáveis numéricas chave\n",
            "\n",
            "2. Relação entre Tempo e Absorção/Perda de Massa por Tipo de Líquido\n",
            "\n",
            "3. Comparação de Absorção/Perda de Massa por Método de Obtenção\n",
            "\n",
            "4. Correlação entre variáveis numéricas\n",
            "\n",
            "5. Relação entre Variáveis de Obtenção Numéricas e Targets\n",
            "\n",
            "6. Comparação de Cw/Mp por Features de Obtenção Categóricas\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-80-830223785.py:127: UserWarning: Glyph 129 (\\x81) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-80-830223785.py:127: UserWarning: Glyph 141 (\\x8d) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-80-830223785.py:128: UserWarning: Glyph 129 (\\x81) missing from font(s) DejaVu Sans.\n",
            "  plt.savefig(os.path.join(reports_dir, f'cw_boxplot_{feature.lower()}.png'))\n",
            "/tmp/ipython-input-80-830223785.py:128: UserWarning: Glyph 141 (\\x8d) missing from font(s) DejaVu Sans.\n",
            "  plt.savefig(os.path.join(reports_dir, f'cw_boxplot_{feature.lower()}.png'))\n",
            "/tmp/ipython-input-80-830223785.py:138: UserWarning: Glyph 129 (\\x81) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-80-830223785.py:138: UserWarning: Glyph 141 (\\x8d) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-80-830223785.py:139: UserWarning: Glyph 129 (\\x81) missing from font(s) DejaVu Sans.\n",
            "  plt.savefig(os.path.join(reports_dir, f'mp_boxplot_{feature.lower()}.png'))\n",
            "/tmp/ipython-input-80-830223785.py:139: UserWarning: Glyph 141 (\\x8d) missing from font(s) DejaVu Sans.\n",
            "  plt.savefig(os.path.join(reports_dir, f'mp_boxplot_{feature.lower()}.png'))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "7. Distribuições de Features Numéricas\n",
            "\n",
            "8. Heatmaps de Correlação entre Variáveis Numéricas\n",
            "Visualizações geradas e salvas na pasta reports.\n",
            "\n",
            "--- Implementando Modelos Preditivos ---\n",
            "\n",
            "--- Modelagem para Absorção (Cw) ---\n",
            "Shape de X_abs depois do pré-processamento: (7084, 75)\n",
            "Shape de y_abs depois do pré-processamento: (7084,)\n",
            "Shape de X_train_abs: (5667, 75), y_train_abs: (5667,)\n",
            "Iniciando treinamento dos modelos de absorção...\n",
            "\n",
            "Modelo de Absorção (Cw) - Linear Regression - R²: 0.9611, RMSE: 1.0813, MAE: 0.7641\n",
            "\n",
            "Modelo de Absorção (Cw) - RandomForest (Best Params: {'max_depth': 5, 'n_estimators': 100}) - R²: 0.9784, RMSE: 0.8065, MAE: 0.3313\n",
            "\n",
            "Modelo de Absorção (Cw) - GradientBoosting (Best Params: {'learning_rate': 0.05, 'n_estimators': 100}) - R²: 0.9789, RMSE: 0.7966, MAE: 0.3381\n",
            "\n",
            "--- Modelagem para Perda de Massa (Mp) ---\n",
            "Shape de X_perda depois do pré-processamento: (7028, 75)\n",
            "Shape de y_perda depois do pré-processamento: (7028,)\n",
            "Shape de X_train_perda: (5622, 75), y_train_perda: (5622,)\n",
            "Iniciando treinamento dos modelos de perda de massa...\n",
            "\n",
            "Modelo de Perda de Massa (Mp) - Linear Regression - R²: 0.9523, RMSE: 6.1820, MAE: 5.2058\n",
            "\n",
            "Modelo de Perda de Massa (Mp) - RandomForest (Best Params: {'max_depth': 5, 'n_estimators': 100}) - R²: 0.9906, RMSE: 2.7444, MAE: 2.2534\n",
            "Modelo de Perda de Massa (Mp) - GradientBoosting (Best Params: {'learning_rate': 0.1, 'n_estimators': 50}) - R²: 0.9906, RMSE: 2.7432, MAE: 2.2510\n",
            "\n",
            "--- Running Simulation Scenarios ---\n",
            "Scenario: Cenário 1: Alta Absorção (FCS, Alta Conc. Quitosana, Tempo Med.), Predicted Cw: 6.1542, Predicted Mp: 39.4022\n",
            "Scenario: Cenário 2: Baixa Perda (Água, Secagem Ambiente, Baixa Vazão), Predicted Cw: 14.2321, Predicted Mp: 8.3059\n",
            "Scenario: Cenário 3: Bom Balanço (SS, Conc. Média, Agitação Prolongada), Predicted Cw: 3.7627, Predicted Mp: 58.9550\n",
            "Scenario: Cenário 4: Baixa Absorção (FCS, Baixa Conc. Quitosana, Curto Tempo), Predicted Cw: 1.4133, Predicted Mp: 69.5860\n",
            "Scenario: Cenário 5: Alta Perda (Água, Secagem Alta, Tempo Longo), Predicted Cw: 14.1598, Predicted Mp: 8.3059\n",
            "Scenario: Cenário 6: Otimizado para Baixo pH (FCS, pH Ácido), Predicted Cw: 6.1444, Predicted Mp: 39.6814\n",
            "Scenario: Cenário 7: Alta Pressão (SS, Boa Vazão), Predicted Cw: 14.1923, Predicted Mp: 8.3059\n",
            "Scenario: Cenário 8: Agitação Rápida (Água), Predicted Cw: 1.4133, Predicted Mp: 69.4461\n",
            "Scenario: Cenário 9: Passagem Água Reator (FCS, Média Conc.), Predicted Cw: 6.1444, Predicted Mp: 39.6814\n",
            "Scenario: Cenário 10: Método de Adição Específico (Água, Adição B), Predicted Cw: 6.1444, Predicted Mp: 39.6814\n",
            "Scenario: Cenário 11: Combinação Extrema (FCS, Alta Temp, Baixo pH), Predicted Cw: 6.1444, Predicted Mp: 39.6814\n",
            "\n",
            "Plotting Simulation Curves...\n",
            "\n",
            "--- Otimizando Propriedades de Biopolímeros ---\n",
            "Status da Otimização: CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL\n",
            "Valor mínimo da função objetivo (-Cw): -6.1812\n",
            "Parâmetros otimizados: {'Concentracao_Quitosana_pct': np.float64(3.657806324110672), 'Vazao_mL_h': np.float64(37.25319111834457)}\n",
            "Cw previsto com parâmetros otimizados: 6.1812\n",
            "Mp previsto com parâmetros otimizados: 40.4333\n",
            "Relatório detalhado gerado em biopolymer_analysis/reports/relatorio_biopolimeros_detalhado.md\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip biopolymer_analysis_data.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "dWXWBK16vh_4",
        "outputId": "1983f511-84d1-46da-c455-74a8b6868ac6"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  biopolymer_analysis_data.zip\n",
            "replace biopolymer_analysis_data/Absorcao_Agua.csv? [y]es, [n]o, [A]ll, [N]one, [r]ename: "
          ]
        }
      ]
    }
  ]
}